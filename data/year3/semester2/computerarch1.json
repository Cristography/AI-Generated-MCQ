[
    {
        "question": "ما هو حجم وحدة الذاكرة في الحاسب الأساسي الموصوف في المحاضرات؟",
        "options": [
            "1024 × 16",
            "4096 × 8",
            "4096 × 16",
            "2048 × 16"
        ],
        "correctAnswerIndex": 2,
        "explanation": "تذكر شريحة \"Hardware Components\" أن مكونات الحاسب الأساسي تتضمن وحدة ذاكرة (memory unit) بحجم 4096 كلمة، وكل كلمة بحجم 16 بت."
    },
    {
        "question": "أي من المسجلات التالية يستخدم للاحتفاظ بعنوان التعليمة التالية التي سيتم تنفيذها؟",
        "options": [
            "AR (Address Register)",
            "IR (Instruction Register)",
            "PC (Program Counter)",
            "DR (Data Register)"
        ],
        "correctAnswerIndex": 2,
        "explanation": "مسجل عداد البرنامج (PC) وظيفته الأساسية هي الاحتفاظ بعنوان الذاكرة الذي يحتوي على التعليمة التالية في تسلسل البرنامج."
    },
    {
        "question": "في صيغة تعليمة الإشارة إلى الذاكرة (Memory-reference) للحاسب الأساسي، ما هي البتات المخصصة لرمز العملية (Opcode)؟",
        "options": [
            "البتات من 0 إلى 11",
            "البتات من 12 إلى 14",
            "البت 15 فقط",
            "البتات من 0 إلى 3"
        ],
        "correctAnswerIndex": 1,
        "explanation": "يوضح الشكل 5-5 أن البتات من 12 إلى 14 مخصصة للـ Opcode، بينما البتات من 0 إلى 11 مخصصة للعنوان، والبت 15 لوضع العنونة (I)."
    },
    {
        "question": "ماذا تعني القيمة '111' في بتات الـ Opcode (البتات 12-14) في تعليمة للحاسب الأساسي؟",
        "options": [
            "أن التعليمة هي تعليمة مرجعية للذاكرة (Memory-reference)",
            "أن التعليمة هي تعليمة قفز غير مشروط (BUN)",
            "أن التعليمة هي إما تعليمة مسجل أو تعليمة إدخال/إخراج",
            "أن التعليمة تستخدم العنونة غير المباشرة"
        ],
        "correctAnswerIndex": 2,
        "explanation": "عندما تكون بتات الـ Opcode هي '111'، فإن التعليمة لا تشير إلى الذاكرة بشكل مباشر. ويتم استخدام البت 15 (I) للتمييز بين تعليمات المسجل (I=0) وتعليمات الإدخال/الإخراج (I=1)."
    },
    {
        "question": "ما هو دور القلاب IEN (Interrupt Enable Flip-flop) في الحاسب؟",
        "options": [
            "يحدد ما إذا كان الإدخال أو الإخراج قد اكتمل",
            "يخزن عنوان العودة بعد المقاطعة",
            "يسمح بتفعيل أو تعطيل نظام المقاطعات في الحاسب",
            "يولد طلب المقاطعة عند جاهزية جهاز الإدخال/الإخراج"
        ],
        "correctAnswerIndex": 2,
        "explanation": "القلاب IEN يستخدم لتمكين (set) أو تعطيل (clear) المقاطعات. عندما يكون معطلاً (cleared)، لا يمكن للحاسب أن يستجيب لطلبات المقاطعة."
    },
    {
        "question": "خلال دورة جلب التعليمة (Fetch Cycle)، ما هي العملية التي تحدث في إشارة التوقيت T0؟",
        "options": [
            "IR ← M[AR]",
            "AR ← PC",
            "PC ← PC + 1",
            "Decode IR(12-14)"
        ],
        "correctAnswerIndex": 1,
        "explanation": "في بداية دورة الجلب، عند T0، يتم نقل محتوى عداد البرنامج (PC) إلى مسجل العنوان (AR) لتحضير الذاكرة لقراءة التعليمة."
    },
    {
        "question": "ما هي العملية المصغرة (microoperation) التي تنفذها تعليمة LDA؟",
        "options": [
            "DR ← M[AR], AC ← DR",
            "M[AR] ← AC",
            "AC ← AC + M[AR]",
            "PC ← AR"
        ],
        "correctAnswerIndex": 0,
        "explanation": "تعليمة LDA (Load to AC) تقوم بتحميل كلمة من الذاكرة إلى المراكم. تتم هذه العملية على خطوتين: أولاً قراءة البيانات من الذاكرة إلى DR، ثم نقلها من DR إلى AC."
    },
    {
        "question": "ما وظيفة تعليمة BSA (Branch and Save Return Address)؟",
        "options": [
            "القفز إلى عنوان وتجاهل العنوان الحالي",
            "القفز إلى روتين فرعي وحفظ عنوان العودة في الذاكرة",
            "القفز إلى روتين فرعي وحفظ عنوان العودة في مسجل PC",
            "العودة من روتين فرعي باستخدام عنوان مخزن"
        ],
        "correctAnswerIndex": 1,
        "explanation": "تعليمة BSA تستخدم لاستدعاء الروتينات الفرعية. تقوم بحفظ عنوان التعليمة التالية (PC) في موقع الذاكرة المحدد بالعنوان الفعال، ثم تقفز إلى الموقع التالي لبدء تنفيذ الروتين الفرعي."
    },
    {
        "question": "ماذا تمثل راية FGI (Input Flag)؟",
        "options": [
            "تشير إلى أن الطابعة جاهزة لاستقبال حرف",
            "تشير إلى أن حرفاً جديداً قد تم استقباله من لوحة المفاتيح وهو جاهز للقراءة",
            "تشير إلى أن المقاطعات مفعلة",
            "تشير إلى أن عملية حسابية قد اكتملت"
        ],
        "correctAnswerIndex": 1,
        "explanation": "راية FGI (Flag Input) يتم تعيينها إلى 1 بواسطة جهاز الإدخال عندما يتم استقبال حرف جديد في مسجل INPR، وتشير إلى أن الحاسب يمكنه قراءة هذا الحرف."
    },
    {
        "question": "في الإدخال/الإخراج المتحكم به بالبرنامج (Programmed I/O)، كيف يعرف المعالج أن جهاز الإدخال جاهز؟",
        "options": [
            "عبر إشارة مقاطعة",
            "عبر التحقق المستمر من حالة راية الإدخال (FGI) في حلقة",
            "عبر إشارة من وحدة التحكم بالذاكرة",
            "عبر انتظار فترة زمنية محددة"
        ],
        "correctAnswerIndex": 1,
        "explanation": "في أسلوب Programmed I/O، يقوم المعالج بتنفيذ حلقة انتظار (loop) يتحقق فيها بشكل متكرر من قيمة الراية (مثل FGI) حتى تصبح 1، مما يشير إلى جاهزية الجهاز."
    },
    {
        "question": "عند حدوث مقاطعة، ماذا يحدث لمحتوى عداد البرنامج (PC)؟",
        "options": [
            "يتم تجاهله",
            "يتم تخزينه في موقع الذاكرة 0",
            "يتم زيادته بمقدار 1 فقط",
            "يتم وضعه في مسجل المراكم AC"
        ],
        "correctAnswerIndex": 1,
        "explanation": "كجزء من دورة المقاطعة، يتم تخزين عنوان العودة (قيمة PC الحالية) في موقع الذاكرة 0 للحفاظ عليه، حتى يتمكن البرنامج من العودة إلى النقطة التي توقف عندها بعد خدمة المقاطعة."
    },
    {
        "question": "ما هي الأداة البرمجية التي تقوم بترجمة برنامج مكتوب بلغة التجميع (Assembly) إلى لغة الآلة؟",
        "options": [
            "Compiler (مترجم)",
            "Interpreter (مفسر)",
            "Linker (رابط)",
            "Assembler (مجمّع)"
        ],
        "correctAnswerIndex": 3,
        "explanation": "المجمّع (Assembler) هو برنامج متخصص يقوم بتحويل التعليمات الرمزية (Symbolic code) في لغة التجميع إلى تعليمات ثنائية (Binary code) يمكن للمعالج فهمها مباشرة."
    },
    {
        "question": "ما هي وظيفة التعليمة الزائفة (Pseudo-instruction) 'ORG' في لغة التجميع؟",
        "options": [
            "تنهي البرنامج",
            "تعرف قيمة عشرية",
            "تحدد عنوان الذاكرة الذي سيبدأ منه تخزين التعليمات التالية",
            "تحجز مساحة في الذاكرة لمتغير"
        ],
        "correctAnswerIndex": 2,
        "explanation": "التعليمة ORG (Originate) تخبر المجمّع بتعيين عداد الموقع إلى القيمة المحددة، مما يعني أن التعليمات أو البيانات التالية سيتم وضعها في الذاكرة بدءاً من ذلك العنوان."
    },
    {
        "question": "أي من المكونات التالية يعتبر جزءاً من \"تنظيم الحاسب\" (Computer Organization) وليس \"بنية الحاسب\" (Computer Architecture)؟",
        "options": [
            "مجموعة التعليمات (Instruction Set)",
            "إشارات التحكم (Control Signals)",
            "أنماط العنونة (Addressing Modes)",
            "أنواع البيانات (Data Types)"
        ],
        "correctAnswerIndex": 1,
        "explanation": "بنية الحاسب (Architecture) هي السمات التي تهم المبرمج (مثل مجموعة التعليمات)، بينما تنظيم الحاسب (Organization) هو كيفية تحقيق هذه البنية على مستوى العتاد (مثل إشارات التحكم وتقنيات التوصيل) والتي تكون عادة شفافة للمبرمج."
    },
    {
        "question": "ما هو ناتج عملية الإزاحة المنطقية لليمين (shr) على المسجل الذي يحتوي القيمة الثنائية 1011؟",
        "options": [
            "0101",
            "1101",
            "1011",
            "0010"
        ],
        "correctAnswerIndex": 0,
        "explanation": "الإزاحة المنطقية لليمين (shift logical right) تزيل البت الأيمن وتضيف صفراً إلى البت الأيسر. لذا، 1011 تصبح 0101."
    },
    {
        "question": "أي مسجل في الحاسب الأساسي يعمل كمسجل إدخال وإخراج مؤقت للبيانات؟",
        "options": [
            "AC و DR",
            "INPR و OUTR",
            "PC و AR",
            "IR و TR"
        ],
        "correctAnswerIndex": 1,
        "explanation": "مسجل INPR (Input Register) يستقبل البيانات من جهاز الإدخال، ومسجل OUTR (Output Register) يحتفظ بالبيانات لإرسالها إلى جهاز الإخراج."
    },
    {
        "question": "لتنفيذ عملية `AR ← AR + 1`، أي إشارة تحكم يجب تفعيلها على مسجل AR؟",
        "options": [
            "LD (Load)",
            "CLR (Clear)",
            "INR (Increment)",
            "SHR (Shift Right)"
        ],
        "correctAnswerIndex": 2,
        "explanation": "إشارة التحكم INR هي المسؤولة عن زيادة قيمة المسجل بمقدار واحد."
    },
    {
        "question": "ماذا يحدث في دورة المقاطعة (Interrupt Cycle) بعد تخزين عنوان العودة؟",
        "options": [
            "يتم تنفيذ التعليمة التالية في البرنامج الأصلي",
            "يتم تعطيل المقاطعات (IEN ← 0) ويقفز عداد البرنامج (PC) إلى العنوان 1",
            "يتم تفعيل المقاطعات (IEN ← 1) وينتظر الحاسب تعليمة جديدة",
            "يتم مسح جميع المسجلات"
        ],
        "correctAnswerIndex": 1,
        "explanation": "بعد حفظ عنوان العودة في M[0]، تقوم دورة المقاطعة تلقائياً بمسح قلاب IEN لمنع مقاطعات أخرى وتعيين PC إلى 1، حيث يبدأ روتين خدمة المقاطعة."
    },
    {
        "question": "ما هي الفائدة الرئيسية لاستخدام ناقل مشترك (Common Bus) في تصميم الحاسب؟",
        "options": [
            "زيادة سرعة الذاكرة",
            "تقليل عدد التوصيلات والأسلاك بين المكونات",
            "زيادة عدد المسجلات الممكنة",
            "تبسيط مجموعة التعليمات"
        ],
        "correctAnswerIndex": 1,
        "explanation": "بدلاً من وجود مسارات بيانات منفصلة بين كل زوج من المسجلات، يوفر الناقل المشترك مساراً واحداً يتم تقاسمه، مما يقلل بشكل كبير من تعقيد التوصيلات وعدد الأسلاك المطلوبة."
    },
    {
        "question": "ماذا تمثل العملية `D3T4: SC ← 0`؟",
        "options": [
            "إذا كان مخرج مفكك الشفرة D3 فعالاً عند إشارة التوقيت T4، يتم مسح عداد التسلسل (SC)",
            "عند T3 و T4، يتم نسخ D إلى SC",
            "يتم تحميل قيمة 34 في عداد التسلسل SC",
            "عندما يكون SC يساوي 0، يتم تفعيل D3 و T4"
        ],
        "correctAnswerIndex": 0,
        "explanation": "هذه الصيغة تمثل عملية تحكم مشروطة. الشرط هو `D3T4` (تزامن تفعيل D3 و T4). إذا تحقق الشرط، يتم تنفيذ العملية `SC ← 0` (مسح عداد التسلسل)."
    },
    {
        "question": "ما هو دور مسجل TR (Temporary Register) في الحاسب الأساسي؟",
        "options": [
            "الاحتفاظ بعنوان الذاكرة",
            "الاحتفاظ بالبيانات القادمة من وحدة الإدخال",
            "الاحتفاظ بتعليمة البرنامج الحالية",
            "الاحتفاظ ببيانات مؤقتة خلال عمليات المعالجة"
        ],
        "correctAnswerIndex": 3,
        "explanation": "مسجل TR هو مسجل مؤقت للأغراض العامة يستخدم من قبل وحدة التحكم للاحتفاظ بالبيانات أو النتائج الوسيطة أثناء تنفيذ التعليمات المعقدة."
    },
    {
        "question": "أي من العبارات التالية تصف العنونة غير المباشرة (Indirect Addressing) بشكل صحيح؟",
        "options": [
            "جزء العنوان في التعليمة هو عنوان المعامل مباشرة",
            "جزء العنوان في التعليمة يشير إلى موقع في الذاكرة يحتوي على عنوان المعامل الفعلي",
            "المعامل موجود داخل التعليمة نفسها",
            "يتم حساب عنوان المعامل عن طريق إضافة قيمة إلى عداد البرنامج"
        ],
        "correctAnswerIndex": 1,
        "explanation": "في العنونة غير المباشرة، لا يحتوي حقل العنوان في التعليمة على البيانات، بل يحتوي على عنوان موقع ذاكرة آخر، وهذا الموقع الثاني هو الذي يحتوي على العنوان الفعلي للمعامل."
    },
    {
        "question": "ما هو عدد خطوط الاختيار (select lines) اللازمة لمضاعف إرسال (Multiplexer) له 8 مداخل بيانات؟",
        "options": [
            "2",
            "3",
            "4",
            "8"
        ],
        "correctAnswerIndex": 1,
        "explanation": "العلاقة بين عدد المداخل (n) وعدد خطوط الاختيار (s) في المضاعف هي n = 2^s. بما أن 8 = 2^3، فإننا نحتاج إلى 3 خطوط اختيار."
    },
    {
        "question": "تعليمة ISZ (Increment and Skip if Zero) هي تعليمة مركبة. ماذا تفعل؟",
        "options": [
            "تزيد قيمة المراكم وتتخطى التعليمة التالية إذا كانت النتيجة صفراً",
            "تزيد قيمة كلمة في الذاكرة وتتخطى التعليمة التالية إذا أصبحت قيمتها صفراً",
            "تتخطى التعليمة التالية إذا كان المراكم صفراً، ثم تزيده",
            "تزيد قيمة عداد البرنامج وتتخطى إذا كانت الراية صفرية"
        ],
        "correctAnswerIndex": 1,
        "explanation": "تقوم تعليمة ISZ أولاً بقراءة كلمة من الذاكرة، ثم تزيد قيمتها بواحد وتعيد كتابتها. بعد ذلك، تختبر إذا كانت القيمة الجديدة صفراً، فإذا كانت كذلك، يتم زيادة عداد البرنامج PC مرة إضافية لتخطي التعليمة التالية."
    },
    {
        "question": "ما الفرق الأساسي بين دارة الجمع الكامل (Full Adder) ودارة الجمع النصفي (Half Adder)؟",
        "options": [
            "الجمع الكامل يمكنه جمع 4 بتات، بينما النصفي يجمع 2 بت فقط",
            "الجمع الكامل له مدخل حمل (Carry-in)، بينما النصفي ليس له",
            "الجمع الكامل أسرع من الجمع النصفي",
            "الجمع الكامل يستخدم بوابات XOR، بينما النصفي يستخدم بوابات AND"
        ],
        "correctAnswerIndex": 1,
        "explanation": "الجمع النصفي يجمع بتين فقط. أما الجمع الكامل فيجمع ثلاثة بتات: بتين من الأرقام المراد جمعها، وبت ثالث هو الحمل القادم من المرحلة السابقة (Carry-in)، مما يجعله مناسباً للربط في دوائر جمع متعددة البتات."
    },
    {
        "question": "أي من تعليمات الإدخال/الإخراج التالية تستخدم للتحقق من حالة راية الإخراج؟",
        "options": [
            "INP",
            "OUT",
            "SKI (Skip on Input Flag)",
            "SKO (Skip on Output Flag)"
        ],
        "correctAnswerIndex": 3,
        "explanation": "تعليمة SKO تتخطى التعليمة التالية إذا كانت راية الإخراج (FGO) تساوي 1، مما يعني أن جهاز الإخراج جاهز لاستقبال بيانات جديدة."
    },
    {
        "question": "في تصميم دارة التحكم في مسجل العنوان AR، أي من العمليات المصغرة التالية تساهم في تحديد إشارة التحكم LD(AR)؟",
        "options": [
            "R'T0: AR ← PC",
            "D5T4: AR ← AR + 1",
            "RT0: AR ← 0",
            "D7I'T3: AR ← M[AR]"
        ],
        "correctAnswerIndex": 0,
        "explanation": "إشارة LD(AR) يتم تفعيلها عندما يكون هناك حاجة لتحميل قيمة جديدة في AR من الناقل. العملية R'T0: AR ← PC هي إحدى هذه الحالات التي يتم فيها تحميل قيمة PC في AR. أما العمليات الأخرى فهي زيادة أو تصفير أو استخدام AR كعنوان وليس كوجهة تحميل."
    },
    {
        "question": "ما هو الغرض من استخدام بوابات ذات ثلاث حالات (Three-State Buffers) في بناء ناقل مشترك؟",
        "options": [
            "لتضخيم الإشارة على الناقل",
            "للسماح لعدة مصادر بالاتصال بنفس الناقل دون تضارب، عن طريق فصل المصادر غير النشطة كهربائياً",
            "لتخزين البيانات مؤقتاً على الناقل",
            "لتحويل البيانات من تسلسلي إلى متوازي"
        ],
        "correctAnswerIndex": 1,
        "explanation": "البوابة ثلاثية الحالات لها حالة ثالثة هي المعاوقة العالية (High-impedance)، والتي تعمل كقطع في الدائرة. هذا يسمح بتوصيل مخرجات عدة مسجلات بنفس الخط، مع تفعيل واحد فقط في كل مرة، بينما تكون الأخرى في حالة معاوقة عالية وغير مؤثرة."
    },
    {
        "question": "لماذا يتم مسح IEN إلى 0 كجزء من دورة المقاطعة؟",
        "options": [
            "لإنهاء البرنامج بشكل آمن",
            "للسماح بمقاطعات ذات أولوية أعلى فقط",
            "لمنع حدوث مقاطعة جديدة أثناء خدمة المقاطعة الحالية",
            "لإعادة ضبط مؤقت المقاطعات"
        ],
        "correctAnswerIndex": 2,
        "explanation": "يتم تعطيل نظام المقاطعات تلقائياً عند بدء خدمة مقاطعة ما لضمان أن روتين الخدمة يمكنه إكمال عمله دون أن تتم مقاطعته هو نفسه. يجب على المبرمج إعادة تفعيل IEN (عادةً قبل العودة من المقاطعة) إذا كان يرغب في السماح بمقاطعات أخرى."
    },
    {
        "question": "العملية `AC ← AC ∧ DR` هي عملية منطقية. أي تعليمة تقوم بتنفيذها؟",
        "options": [
            "ADD",
            "AND",
            "LDA",
            "CMA"
        ],
        "correctAnswerIndex": 1,
        "explanation": "الرمز '∧' يمثل العملية المنطقية AND. تعليمة AND تقوم بتنفيذ عملية AND بين محتوى المراكم AC ومحتوى كلمة الذاكرة (التي يتم جلبها أولاً إلى DR)."
    },
    {
        "question": "ما هو الحد الأقصى لعدد التعليمات المرجعية للذاكرة التي يمكن للحاسب الأساسي أن يدعمها؟",
        "options": [
            "7",
            "8",
            "16",
            "25"
        ],
        "correctAnswerIndex": 0,
        "explanation": "بما أن رمز العملية (Opcode) يتكون من 3 بتات (12-14)، يمكن أن يكون هناك 2^3 = 8 رموز ممكنة. الرمز '111' محجوز لتعليمات المسجل والإدخال/الإخراج، مما يترك 7 رموز (من 000 إلى 110) متاحة للتعليمات المرجعية للذاكرة."
    },
    {
        "question": "ما هو البرنامج الذي يترجم لغة برمجة عالية المستوى مثل C++ إلى لغة الآلة؟",
        "options": [
            "Assembler",
            "Debugger",
            "Compiler",
            "Loader"
        ],
        "correctAnswerIndex": 2,
        "explanation": "المترجم (Compiler) هو البرنامج الذي يأخذ الكود المصدري المكتوب بلغة عالية المستوى ويترجمه بالكامل إلى ملف تنفيذي يحتوي على تعليمات الآلة."
    },
    {
        "question": "في تعليمة `pB7: IEN ← 1`، ماذا يمثل `p`؟",
        "options": [
            "إشارة تصفير",
            "شرط عام لجميع تعليمات الإدخال/الإخراج",
            "مؤشر إلى الذاكرة",
            "إشارة زيادة"
        ],
        "correctAnswerIndex": 1,
        "explanation": "في جدول تعليمات الإدخال/الإخراج، `p` هو اختصار لشرط التحكم `D7I T3`، وهو الشرط الذي يجب أن يكون محققاً لتنفيذ أي من تعليمات الإدخال/الإخراج. `B7` هو البت السابع من مسجل التعليمات الذي يحدد هذه التعليمة بالذات."
    },
    {
        "question": "ماذا يحدث عند تنفيذ تعليمة HLT (Halt)؟",
        "options": [
            "يتم مسح عداد البرنامج PC",
            "يتم تعيين قلاب بدء-إيقاف (S) إلى 0، مما يوقف الساعة ومن ثم الحاسب",
            "يتم إعادة تشغيل الحاسب",
            "يقفز الحاسب إلى العنوان 0 في الذاكرة"
        ],
        "correctAnswerIndex": 1,
        "explanation": "تعليمة HLT تقوم بمسح (clear) قلاب التحكم S (start-stop flip-flop)، مما يؤدي إلى إيقاف مولد نبضات الساعة، وبالتالي يتوقف الحاسب عن جلب وتنفيذ التعليمات."
    },
    {
        "question": "أي من القلابات (Flip-Flops) التالية يعتبر 'Status Flip-Flop' في تصميم الحاسب الأساسي؟",
        "options": [
            "S (Start-Stop)",
            "R (Interrupt Request)",
            "E (Extended Accumulator bit)",
            "كل ما سبق"
        ],
        "correctAnswerIndex": 3,
        "explanation": "قلابات الحالة هي قلابات بت واحد تستخدم لتخزين معلومات حول حالة الحاسب أو نتيجة عملية. S, E, R, IEN, FGI, FGO كلها تعتبر قلابات حالة في هذا التصميم."
    },
    {
        "question": "إذا كان محتوى `AC` هو `1100` ومحتوى `DR` هو `1010`، فما هو محتوى `AC` بعد تنفيذ `AC ← AC ∨ DR` (OR)؟",
        "options": [
            "1000",
            "1110",
            "0110",
            "1100"
        ],
        "correctAnswerIndex": 1,
        "explanation": "عملية OR المنطقية تنتج 1 إذا كان أي من البتات المقابلة هو 1. (1∨1=1, 1∨0=1, 0∨1=1, 0∨0=0). إذن 1100 ∨ 1010 = 1110."
    },
    {
        "question": "ما هو دور مفكك الشفرة (Decoder) بحجم 3*8 في وحدة التحكم؟",
        "options": [
            "يفك شفرة العنوان المكون من 8 بتات",
            "يولد 8 إشارات تحكم بناءً على 3 بتات من رمز العملية (Opcode)",
            "يختار واحداً من 8 مسجلات",
            "يولد إشارات التوقيت"
        ],
        "correctAnswerIndex": 1,
        "explanation": "يتم توصيل بتات رمز العملية (IR[14-12]) كمدخلات لمفكك الشفرة 3*8. بناءً على قيمة هذه البتات الثلاث، يتم تفعيل واحد فقط من مخارجه الثمانية (D0 إلى D7)، والذي يحدد بدوره التعليمة المرجعية للذاكرة التي سيتم تنفيذها."
    },
    {
        "question": "ما هي ميزة الذاكرة SRAM مقارنة بالذاكرة DRAM؟",
        "options": [
            "أرخص وأعلى كثافة",
            "لا تحتاج إلى تحديث (refresh) وأسرع",
            "تستهلك طاقة أعلى",
            "أبطأ ولكنها أكثر موثوقية"
        ],
        "correctAnswerIndex": 1,
        "explanation": "SRAM (Static RAM) أسرع بكثير من DRAM (Dynamic RAM) ولا تحتاج إلى دوائر تحديث مستمر للحفاظ على البيانات، لكنها بالمقابل أقل كثافة وأغلى ثمناً."
    },
    {
        "question": "ما هي العملية المصغرة التي تنفذها تعليمة CLE (Clear E)؟",
        "options": [
            "E ← 1",
            "E ← E'",
            "E ← 0",
            "AC ← 0"
        ],
        "correctAnswerIndex": 2,
        "explanation": "تعليمة CLE هي تعليمة مسجل تقوم بمسح (وضع قيمة 0) في قلاب الحمل E (Extended accumulator bit)."
    },
    {
        "question": "لماذا يتم تنفيذ عملية `M[AR] ← DR` في تعليمة ISZ؟",
        "options": [
            "لقراءة القيمة من الذاكرة",
            "لإعادة كتابة القيمة المزادة (incremented value) إلى الذاكرة",
            "لمسح موقع الذاكرة",
            "للتحقق من قيمة DR"
        ],
        "correctAnswerIndex": 1,
        "explanation": "دورة تعليمة ISZ تتضمن قراءة القيمة من الذاكرة إلى DR، زيادتها في DR، ثم إعادة كتابة القيمة الجديدة من DR إلى نفس موقع الذاكرة M[AR]."
    },
    {
        "question": "ما هو الفرق بين الإزاحة الدائرية (Circular Shift) والإزاحة المنطقية (Logical Shift)؟",
        "options": [
            "الإزاحة الدائرية تحافظ على جميع البتات الأصلية عن طريق نقل البت المزاح إلى الطرف الآخر، بينما المنطقية تفقد البت المزاح وتدخل صفراً",
            "الإزاحة المنطقية أسرع من الدائرية",
            "الإزاحة الدائرية تستخدم للعمليات الحسابية، بينما المنطقية تستخدم لمعالجة البيانات",
            "لا يوجد فرق جوهري بينهما"
        ],
        "correctAnswerIndex": 0,
        "explanation": "في الإزاحة الدائرية (cil/cir)، البت الذي يخرج من أحد طرفي المسجل يدخل من الطرف الآخر. أما في الإزاحة المنطقية (shl/shr)، فيتم إدخال 0 في الطرف الفارغ ويضيع البت الذي خرج."
    },
    {
        "question": "في لغة التجميع، كيف يتم تحديد تعليمة تستخدم العنونة غير المباشرة؟",
        "options": [
            "بإضافة الرمز # قبل المعامل",
            "بإضافة الحرف 'I' بعد اسم التعليمة",
            "بوضع المعامل بين قوسين",
            "باستخدام تعليمة خاصة مثل 'INDIRECT'"
        ],
        "correctAnswerIndex": 1,
        "explanation": "كما هو موضح في أمثلة البرامج، يتم تمييز التعليمة التي تستخدم العنونة غير المباشرة بإضافة الحرف I في نهاية حقل التعليمة، مثل `ADD PTR I`."
    },
    {
        "question": "أي مكون مسؤول عن توليد إشارات التوقيت المتسلسلة T0, T1, T2, ...؟",
        "options": [
            "المراكم (AC)",
            "وحدة الحساب والمنطق (ALU)",
            "عداد تسلسل بحجم 4 بت ومفكك شفرة 4*16",
            "مسجل التعليمات (IR)"
        ],
        "correctAnswerIndex": 2,
        "explanation": "يتم استخدام عداد تسلسل (Sequence Counter - SC) لعد النبضات من 0 إلى 15. يتم توصيل مخرجاته الأربعة إلى مفكك شفرة 4*16، والذي يقوم بتفعيل واحد من مخارجه الـ 16 (T0-T15) في كل نبضة ساعة."
    },
    {
        "question": "ما هو حجم مسجل العنوان (AR) في الحاسب الأساسي؟",
        "options": [
            "16 بت",
            "12 بت",
            "8 بت",
            "4 بت"
        ],
        "correctAnswerIndex": 1,
        "explanation": "بما أن الذاكرة حجمها 4096 كلمة، فإننا نحتاج إلى log2(4096) = 12 بت لعنونة كل موقع فيها. لذلك، يجب أن يكون حجم مسجل العنوان (AR) 12 بت."
    },
    {
        "question": "أي من الخيارات التالية يمثل بشكل صحيح عملية نقل متوازية مشروطة؟",
        "options": [
            "IF (T1=1) THEN (R1 ← R2)",
            "R1 ← R2 + 1",
            "T1: R1 ← R2",
            "R1 = R2"
        ],
        "correctAnswerIndex": 2,
        "explanation": "في لغة نقل المسجلات (RTL)، يتم تمثيل الشرط (في هذه الحالة إشارة التحكم T1) متبوعاً بنقطتين رأسيتين، ثم عملية النقل. هذا يعني أن محتوى R2 يتم نقله إلى R1 فقط عندما تكون إشارة التحكم T1 فعالة (تساوي 1)."
    },
    {
        "question": "ما هي الوظيفة الأساسية للمراكم (Accumulator - AC)؟",
        "options": [
            "تخزين عنوان التعليمة التالية",
            "تخزين التعليمة الحالية",
            "العمل كمسجل معالج ضمني للاحتفاظ بأحد المعاملات ونتيجة العمليات الحسابية والمنطقية",
            "التحكم في تدفق البيانات على الناقل"
        ],
        "correctAnswerIndex": 2,
        "explanation": "المراكم هو مسجل للأغراض العامة مرتبط ارتباطاً وثيقاً بوحدة الحساب والمنطق. يستخدم بشكل ضمني في العديد من التعليمات كمصدر لأحد المعاملات وكمكان لتخزين نتيجة العملية."
    },
    {
        "question": "في لغة التجميع، أي حقل من حقول السطر يمكن أن يكون فارغاً؟",
        "options": [
            "حقل التعليمة (Instruction field)",
            "حقل العنوان (Address field) في التعليمات المرجعية للذاكرة",
            "حقل التسمية (Label field) وحقل التعليق (Comment field)",
            "كل الحقول يجب أن تحتوي على قيمة"
        ],
        "correctAnswerIndex": 2,
        "explanation": "يمكن أن يكون سطر التجميع بدون تسمية (label) إذا لم يتم الإشارة إليه من أي مكان آخر في البرنامج، ويمكن أن يكون بدون تعليق. لكن حقل التعليمة ضروري لتحديد العملية."
    },
    {
        "question": "ما هي القيمة السداسية عشرية لتعليمة SPA (Skip if AC positive)؟",
        "options": [
            "7020",
            "7008",
            "7010",
            "7100"
        ],
        "correctAnswerIndex": 2,
        "explanation": "وفقاً لجدول تعليمات الحاسب الأساسي (TABLE 5-2)، فإن الكود السداسي عشري لتعليمة SPA هو 7010."
    },
    {
        "question": "أي من العمليات التالية لا تعتبر عملية مصغرة (microoperation)؟",
        "options": [
            "AC ← AC + DR",
            "PC ← PC + 1",
            "تنفيذ برنامج كامل",
            "DR ← M[AR]"
        ],
        "correctAnswerIndex": 2,
        "explanation": "العملية المصغرة هي عملية أولية أساسية يتم تنفيذها على محتويات المسجلات خلال نبضة ساعة واحدة. تنفيذ برنامج كامل هو سلسلة معقدة تتكون من آلاف أو ملايين العمليات المصغرة."
    },
    {
        "question": "ما الذي يحدد ما إذا كانت تعليمة '111' هي تعليمة مسجل أم تعليمة إدخال/إخراج؟",
        "options": [
            "محتوى المراكم AC",
            "قيمة البت 15 (I) من مسجل التعليمات IR",
            "حالة راية FGO",
            "قيمة عداد التسلسل SC"
        ],
        "correctAnswerIndex": 1,
        "explanation": "عندما يكون الـ opcode هو 111، يتم فحص البت 15. إذا كانت I=0، تكون التعليمة تعليمة مرجعية للمسجل. إذا كانت I=1، تكون التعليمة تعليمة إدخال/إخراج."
    },
    {
        "question": "ما هي العملية المصغرة التي تتم عند تنفيذ تعليمة `OUT`؟",
        "options": [
            "OUTR ← AC(0-7), FGO ← 0",
            "AC(0-7) ← INPR, FGI ← 0",
            "OUTR ← 0",
            "FGO ← 1"
        ],
        "correctAnswerIndex": 0,
        "explanation": "تعليمة OUT تنقل الجزء الأدنى من المراكم (8 بت) إلى مسجل الإخراج OUTR، ثم تقوم بمسح راية الإخراج FGO للإشارة إلى أن البيانات الجديدة غير جاهزة بعد للإرسال (سيقوم الجهاز بتعيينها لاحقاً)."
    },
    {
        "question": "ما هو دور العنوان الفعال (Effective Address)؟",
        "options": [
            "هو دائمًا العنوان الموجود في عداد البرنامج PC",
            "هو عنوان التعليمة نفسها",
            "هو العنوان النهائي للمعامل في الذاكرة بعد تطبيق أي عنونة غير مباشرة أو حسابات أخرى",
            "هو عنوان أول موقع في الذاكرة"
        ],
        "correctAnswerIndex": 2,
        "explanation": "العنوان الفعال هو العنوان الحقيقي الذي سيستخدمه المعالج للوصول إلى البيانات في الذاكرة. في العنونة المباشرة، هو نفس العنوان في التعليمة. في العنونة غير المباشرة، هو العنوان الذي يتم جلبه من الذاكرة."
    },
    {
        "question": "أي مما يلي يصف بشكل صحيح هندسة فون نيومان (Von Neumann architecture)؟",
        "options": [
            "تخزين البيانات والتعليمات في ذاكرات منفصلة",
            "تخزين البيانات والتعليمات في ذاكرة قراءة-كتابة واحدة ومشتركة",
            "تنفيذ التعليمات بشكل متوازي دائماً",
            "استخدام مسجلات فقط بدون ذاكرة رئيسية"
        ],
        "correctAnswerIndex": 1,
        "explanation": "من السمات الرئيسية لهندسة فون نيومان هي وجود ذاكرة واحدة مشتركة لتخزين كل من تعليمات البرنامج وبياناته، والوصول إليها عبر ناقل مشترك."
    },
    {
        "question": "ماذا يحدث عند تنفيذ العملية المصغرة `D1T5: AC ← AC + DR, E ← Cout, SC ← 0`؟",
        "options": [
            "يتم جمع محتوى AC و DR وتخزين النتيجة في DR",
            "يتم جمع محتوى AC و DR، وتخزين النتيجة في AC، وتخزين الحمل الخارج في E، ومسح عداد التسلسل",
            "يتم نقل محتوى DR إلى AC ويتم مسح SC",
            "يتم تنفيذ عملية ADD وتخطي إذا كان هناك حمل"
        ],
        "correctAnswerIndex": 1,
        "explanation": "هذه هي المرحلة الثانية من تعليمة ADD. تقوم بجمع محتوى AC و DR، وتخزن النتيجة في AC. الحمل الخارج من عملية الجمع يتم تخزينه في القلاب E. وأخيراً، يتم مسح SC إلى 0 لإنهاء دورة التعليمة والبدء في دورة جلب جديدة."
    },
    {
        "question": "إذا كان لدينا ناقل مشترك مبني باستخدام Encoder و Multiplexer، ما هي وظيفة الـ Encoder؟",
        "options": [
            "اختيار المسجل الوجهة الذي سيستقبل البيانات",
            "توليد الشيفرة الثنائية (S2, S1, S0) المقابلة للمسجل المصدر الذي يريد وضع بياناته على الناقل",
            "تخزين البيانات مؤقتاً قبل وضعها على الناقل",
            "فك تشفير الشيفرة الثنائية لتفعيل المسجل"
        ],
        "correctAnswerIndex": 1,
        "explanation": "في تصميم دارة التحكم بالناقل، يأخذ الـ Encoder عدة خطوط إدخال (كل خط يمثل طلب من مسجل معين) ويولد شيفرة ثنائية على مخارجه. هذه الشيفرة يتم استخدامها كخطوط اختيار للـ Multiplexer لتمرير بيانات المسجل المطلوب إلى الناقل."
    },
    {
        "question": "أي نوع من الإزاحة يستخدم عادة في عمليات الضرب والقسمة على قوى العدد 2؟",
        "options": [
            "الإزاحة الدائرية (Circular shift)",
            "الإزاحة الحسابية (Arithmetic shift)",
            "إزاحة البتات العشوائية",
            "الإزاحة المنطقية (Logical Shift) للأعداد غير المؤشرة"
        ],
        "correctAnswerIndex": 1,
        "explanation": "الإزاحة الحسابية لليمين تعادل القسمة على 2، والإزاحة الحسابية لليسار تعادل الضرب في 2 للأعداد المؤشرة (signed numbers)، لأنها تحافظ على بت الإشارة."
    },
    {
        "question": "ما هي النتيجة النهائية في `AC` بعد تنفيذ تعليمة `CMA` (Complement AC) إذا كانت قيمته الأولية `1010`؟",
        "options": [
            "0101",
            "1010",
            "0000",
            "1111"
        ],
        "correctAnswerIndex": 0,
        "explanation": "تعليمة CMA تقوم بتطبيق المتمم الأحادي (1's complement) على محتوى المراكم، أي أنها تقلب كل بت. `1` يصبح `0` و `0` يصبح `1`. لذا `1010` تصبح `0101`."
    },
    {
        "question": "ما هو الحد الأقصى للذاكرة التي يمكن عنونتها مباشرة باستخدام تعليمة واحدة في الحاسب الأساسي؟",
        "options": [
            "256 كلمة",
            "1024 كلمة",
            "2048 كلمة",
            "4096 كلمة"
        ],
        "correctAnswerIndex": 3,
        "explanation": "حقل العنوان في التعليمة هو 12 بت، مما يسمح بعنونة 2^12 = 4096 موقع ذاكرة مختلف."
    },
    {
        "question": "ما هي أول عملية تحدث في دورة التنفيذ (execute phase) لتعليمة `ADD` ذات العنونة غير المباشرة؟",
        "options": [
            "AC ← AC + M[AR]",
            "AR ← M[AR]",
            "DR ← M[AR]",
            "PC ← PC + 1"
        ],
        "correctAnswerIndex": 1,
        "explanation": "في العنونة غير المباشرة (I=1)، تكون أول خطوة في دورة التنفيذ (عند T3) هي جلب العنوان الفعال من الذاكرة. يتم ذلك عن طريق `AR ← M[AR]`، حيث يتم استبدال العنوان غير المباشر في AR بالعنوان الفعال الموجود في الذاكرة."
    },
    {
        "question": "أي من الأجهزة التالية يعتبر جهاز فك تشفير (decoder)؟",
        "options": [
            "جهاز يحول إشارة من 8 خطوط إلى شيفرة 3 بت",
            "جهاز يختار واحداً من عدة مداخل لتمريره إلى مخرج واحد",
            "جهاز يحول شيفرة 3 بت إلى تفعيل واحد من 8 خطوط إخراج",
            "جهاز يجمع عددين ثنائيين"
        ],
        "correctAnswerIndex": 2,
        "explanation": "مفكك الشفرة (Decoder) يأخذ n مدخلاً ويولد 2^n مخرجاً، حيث يتم تفعيل مخرج واحد فقط لكل تركيبة ممكنة من المدخلات. المثال هو تحويل 3 بت إلى 8 خطوط."
    },
    {
        "question": "ما هو دور الراية `FGO` (Flag Output)؟",
        "options": [
            "تصبح 1 عندما يكون مسجل INPR ممتلئاً",
            "تصبح 0 عندما يكون جهاز الإخراج جاهزاً لاستقبال البيانات",
            "تصبح 1 من قبل جهاز الإخراج عندما يكمل عملية الإخراج ويكون جاهزاً لبيانات جديدة",
            "تستخدم لتفعيل المقاطعات"
        ],
        "correctAnswerIndex": 2,
        "explanation": "الراية FGO يتم تعيينها من قبل جهاز الإخراج للإشارة إلى أن العملية السابقة قد انتهت وهو الآن متاح. المعالج يقوم بمسحها إلى 0 عندما يرسل بيانات جديدة إلى OUTR."
    },
    {
        "question": "في تصميم دارة التحكم للمراكم `AC`، لماذا يتم استخدام بوابة OR كبيرة لتحديد إشارة التحكم `LD(AC)`؟",
        "options": [
            "لأن `AC` هو المسجل الأكثر استخداماً",
            "لأن هناك العديد من التعليمات المختلفة التي تقوم بتحميل قيمة في `AC`",
            "لتبسيط التصميم",
            "لزيادة سرعة التحميل"
        ],
        "correctAnswerIndex": 1,
        "explanation": "إشارة `LD(AC)` يجب أن تُفعّل إذا تم تنفيذ أي من التعليمات التي تعدّل قيمة `AC` عن طريق التحميل (مثل `LDA`, `ADD`, `AND`, `INPR`). المعادلة المنطقية لـ `LD(AC)` ستكون عبارة عن `OR` لكل شروط التحكم الخاصة بهذه التعليمات."
    },
    {
        "question": "ماذا تعني التعليمة الزائفة (pseudoinstruction) `END`؟",
        "options": [
            "توقف تنفيذ البرنامج",
            "تشير إلى نهاية البرنامج الرمزي للمجمّع (assembler)",
            "تولد تعليمة `HLT`",
            "تعود من روتين فرعي"
        ],
        "correctAnswerIndex": 1,
        "explanation": "`END` هي توجيه للمجمّع بأن الكود المصدري قد انتهى، وليست تعليمة يتم تنفيذها من قبل المعالج. وهي ضرورية لتحديد نهاية عملية التجميع."
    },
    {
        "question": "أي من المسجلات التالية لا يتصل مباشرة بالناقل المشترك كـ 'مصدر' للبيانات؟",
        "options": [
            "PC",
            "DR",
            "AC",
            "OUTR"
        ],
        "correctAnswerIndex": 3,
        "explanation": "بناءً على المخطط العام، مسجل الإخراج OUTR يستقبل البيانات من الناقل (من AC) ولكنه لا يضع بياناته على الناقل المشترك. بياناته تذهب مباشرة إلى جهاز الإخراج. بالمقابل، PC, DR, AC, AR, IR, TR يمكنها وضع بياناتها على الناقل."
    },
    {
        "question": "ما هي العملية المصغرة لتعليمة SZE (Skip if E is 0)؟",
        "options": [
            "If (E=0) then (PC ← PC + 1)",
            "If (AC=0) then (PC ← PC + 1)",
            "E ← 0",
            "PC ← PC + 1"
        ],
        "correctAnswerIndex": 0,
        "explanation": "تعليمة SZE هي تعليمة تخطي مشروطة. تقوم بفحص قيمة قلاب الحمل E. إذا كانت قيمته 0، يتم زيادة عداد البرنامج PC بمقدار 1، مما يؤدي إلى تخطي التعليمة التالية."
    },
    {
        "question": "ما هو الغرض من حقل 'التعليقات' (Comments) في برنامج لغة التجميع؟",
        "options": [
            "يتم ترجمته إلى تعليمات آلة إضافية",
            "يتم تجاهله تماماً من قبل المجمّع ويستخدم فقط لشرح الكود للمبرمجين",
            "يستخدم لتعريف المتغيرات",
            "يستخدم لتحديد عناوين الذاكرة"
        ],
        "correctAnswerIndex": 1,
        "explanation": "التعليقات هي جزء من الكود المصدري مخصص للمبرمجين لقراءة وفهم منطق البرنامج. المجمّع يتجاهلها بالكامل ولا تؤثر على الكود الثنائي الناتج."
    },
    {
        "question": "ما هي الدارة التركيبية (Combinational Circuit)؟",
        "options": [
            "دارة يعتمد خرجها على المدخلات الحالية وحالتها السابقة",
            "دارة ليس لها ذاكرة ويعتمد خرجها فقط على قيم المدخلات الحالية",
            "دارة تتكون فقط من قلابات (flip-flops)",
            "دارة تستخدم ساعة (clock) لتزامن عملياتها"
        ],
        "correctAnswerIndex": 1,
        "explanation": "السمة المميزة للدوائر التركيبية هي أنها لا تملك ذاكرة. لأي مجموعة من قيم المدخلات، سيكون للخرج قيمة محددة وثابتة، بغض النظر عن المدخلات أو المخرجات السابقة."
    },
    {
        "question": "ماذا تمثل السلسلة الفارغة (ε) في سياق اللغات الصورية؟",
        "options": [
            "رمز غير معروف",
            "سلسلة تحتوي على مسافة فارغة",
            "السلسلة ذات الطول صفر",
            "خطأ في السلسلة"
        ],
        "correctAnswerIndex": 2,
        "explanation": "السلسلة الفارغة، التي يرمز لها بـ ε أو λ، هي سلسلة فريدة لا تحتوي على أي رموز، وبالتالي طولها يساوي صفرًا."
    },
    {
        "question": "في مخطط دورة التعليمات، لماذا يتم فحص قيمة `D7` بعد مرحلة فك التشفير؟",
        "options": [
            "لتحديد ما إذا كانت هناك حاجة لزيادة `PC`",
            "لتحديد ما إذا كانت التعليمة مرجعية للذاكرة أم لا",
            "للتحقق من وجود مقاطعة",
            "لتحديد ما إذا كانت العملية حسابية أم منطقية"
        ],
        "correctAnswerIndex": 1,
        "explanation": "المخرج `D7` من مفكك شفرة الـ opcode يتم تفعيله فقط عندما يكون الـ opcode هو `111`. فحص قيمة `D7` يسمح لوحدة التحكم بالتمييز بين التعليمات المرجعية للذاكرة (عندما `D7=0`) وتعليمات المسجل أو الإدخال/الإخراج (عندما `D7=1`)."
    },
    {
        "question": "ما هي أكبر قيمة يمكن تمثيلها في مسجل `PC` للحاسب الأساسي؟",
        "options": [
            "4095",
            "4096",
            "65535",
            "2047"
        ],
        "correctAnswerIndex": 0,
        "explanation": "مسجل `PC` يتكون من 12 بت. أكبر قيمة يمكن تمثيلها بـ 12 بت هي 2^12 - 1، وهو ما يساوي 4096 - 1 = 4095. (العناوين تتراوح من 0 إلى 4095)."
    },
    {
        "question": "أي من العبارات التالية تصف بشكل أفضل مفهوم 'إكمال مجموعة التعليمات' (Instruction Set Completeness)؟",
        "options": [
            "أن يكون لدى الحاسب تعليمات لكل عملية حسابية ممكنة",
            "أن يكون لدى الحاسب مجموعة كافية من التعليمات لبرمجة أي وظيفة قابلة للحساب",
            "أن تكون جميع التعليمات بنفس الطول",
            "أن يدعم الحاسب المقاطعات والإدخال/الإخراج المباشر للذاكرة"
        ],
        "correctAnswerIndex": 1,
        "explanation": "تعتبر مجموعة التعليمات كاملة إذا كانت توفر القدرة على تنفيذ العمليات الحسابية والمنطقية، نقل البيانات بين الذاكرة والمسجلات، وتغيير تسلسل تنفيذ البرنامج (القفز المشروط وغير المشروط). هذه المكونات معاً تسمح ببناء أي خوارزمية."
    },
    {
        "question": "ما هي القيمة التي يتم تحميلها في `AC` عند تنفيذ تعليمة `CLA` (Clear AC)؟",
        "options": [
            "1",
            "قيمة من الذاكرة",
            "0",
            "-1"
        ],
        "correctAnswerIndex": 2,
        "explanation": "تعليمة `CLA` هي تعليمة مسجل تقوم بمسح المراكم، أي أنها تضع القيمة صفر في جميع بتات المسجل `AC`."
    },
    {
        "question": "ما هو دور `SC` (Sequence Counter) في وحدة التحكم؟",
        "options": [
            "يعد عدد التعليمات التي تم تنفيذها",
            "يولد إشارات التوقيت المتزامنة (T0, T1, T2...)",
            "يخزن نتيجة آخر عملية حسابية",
            "يتحكم في سرعة الناقل"
        ],
        "correctAnswerIndex": 1,
        "explanation": "يعمل `SC` كعداد يتقدم مع كل نبضة ساعة. يتم استخدام قيمته لتوليد إشارات توقيت منفصلة ومتسلسلة، والتي بدورها تتحكم في تفعيل العمليات المصغرة في الوقت المناسب خلال دورة التعليمة."
    },
    {
        "question": "كيف يتم تنفيذ عملية الطرح في وحدة الحساب والمنطق (ALU) للحاسب الأساسي؟",
        "options": [
            "باستخدام دارة طرح مخصصة",
            "بأخذ المتمم الثنائي (2's complement) للمطروح ثم جمعه مع المطروح منه",
            "بقلب بتات المطروح فقط",
            "بتحويل الأرقام إلى عشرية ثم طرحها"
        ],
        "correctAnswerIndex": 1,
        "explanation": "الطريقة الشائعة لتنفيذ الطرح باستخدام دارة جمع هي استخدام المتمم الثنائي. عملية `A - B` تعادل `A + (-B)`. يتم الحصول على `-B` عن طريق حساب المتمم الثنائي لـ `B` (قلب البتات + 1)."
    },
    {
        "question": "ماذا يحدث إذا تم تنفيذ تعليمة `BUN 100` عندما يكون `PC` يحتوي على 25؟",
        "options": [
            "يتم تخزين 26 في الموقع 100",
            "يتم تحميل القيمة 100 في `PC`",
            "لا يحدث شيء لأن القفز غير مشروط",
            "يتم مقارنة `AC` مع 100"
        ],
        "correctAnswerIndex": 1,
        "explanation": "`BUN` هي تعليمة قفز غير مشروط. تقوم ببساطة بتحميل العنوان الفعال للتعليمة (في هذه الحالة 100) في عداد البرنامج `PC`. التعليمة التالية التي سيتم جلبها ستكون من العنوان 100."
    },
    {
        "question": "أي من القلابات التالية يتم فحصه لتحديد الحاجة إلى دورة مقاطعة؟",
        "options": [
            "E",
            "S",
            "IEN و (FGI أو FGO)",
            "D7"
        ],
        "correctAnswerIndex": 2,
        "explanation": "تبدأ دورة المقاطعة إذا كان قلاب تفعيل المقاطعات `IEN` يساوي 1، وفي نفس الوقت كانت هناك راية إدخال `FGI` أو راية إخراج `FGO` مرفوعة (تساوي 1)، مما يشير إلى وجود طلب مقاطعة صالح."
    },
    {
        "question": "لماذا تعتبر الدارات التتابعية (Sequential Circuits) ضرورية في تصميم الحاسب؟",
        "options": [
            "لأنها أسرع من الدارات التركيبية",
            "لأنها توفر القدرة على تخزين المعلومات (الذاكرة)، وهو أمر أساسي للمسجلات والعدادات",
            "لأنها تستهلك طاقة أقل",
            "لأنها أبسط في التصميم"
        ],
        "correctAnswerIndex": 1,
        "explanation": "الدارات التتابعية، على عكس التركيبية، لها حالة داخلية أو ذاكرة. هذه القدرة على 'تذكر' الحالة السابقة هي أساس عمل القلابات (flip-flops)، والتي بدورها هي اللبنات الأساسية للمسجلات والذاكرة والعدادات."
    },
    {
        "question": "ما هو الفرق بين لغة الآلة (Machine Language) ولغة التجميع (Assembly Language)؟",
        "options": [
            "لغة الآلة تستخدم رموزاً نصية، بينما لغة التجميع تستخدم أرقاماً ثنائية",
            "لا يوجد فرق، هما اسمان لنفس الشيء",
            "لغة الآلة هي التمثيل الثنائي المباشر للتعليمات، بينما لغة التجميع تستخدم رموزاً قابلة للقراءة (mnemonics) لتمثيل هذه التعليمات",
            "لغة التجميع يتم تنفيذها مباشرة بواسطة المعالج، بينما لغة الآلة تحتاج إلى مترجم"
        ],
        "correctAnswerIndex": 2,
        "explanation": "لغة الآلة هي اللغة الوحيدة التي يفهمها المعالج مباشرة (تسلسل من الأصفار والواحدات). لغة التجميع هي طبقة تجريدية فوقها تستخدم رموزاً مثل ADD, LDA, MOV لتسهيل البرمجة على البشر. يقوم المجمّع بترجمة هذه الرموز إلى لغة الآلة المقابلة لها."
    },
    {
        "question": "ما هي العملية المصغرة التي تنفذها تعليمة `ION` (Interrupt On)؟",
        "options": [
            "IEN ← 0",
            "R ← 1",
            "IEN ← 1",
            "PC ← 1"
        ],
        "correctAnswerIndex": 2,
        "explanation": "تعليمة ION تقوم بتفعيل نظام المقاطعات عن طريق وضع القيمة 1 في قلاب تمكين المقاطعات IEN (Interrupt Enable)."
    },
    {
        "question": "ما هو دور البت `I` (البت 15) في تعليمة مرجعية للذاكرة؟",
        "options": [
            "يحدد ما إذا كانت العملية جمع أم طرح",
            "يحدد نوع المسجل المستخدم",
            "يحدد نمط العنونة (0 = مباشر، 1 = غير مباشر)",
            "يشير إلى أن التعليمة هي تعليمة مقاطعة"
        ],
        "correctAnswerIndex": 2,
        "explanation": "البت `I` (Indirect bit) يستخدم لتحديد كيفية تفسير حقل العنوان. إذا كان `I=0`، فإن العنوان في التعليمة هو العنوان الفعال (عنونة مباشرة). إذا كان `I=1`، فإن العنوان في التعليمة يشير إلى موقع ذاكرة يحتوي على العنوان الفعال (عنونة غير مباشرة)."
    },
    {
        "question": "في دارة الجامع-الطريح (Adder-Subtractor)، كيف يتم التحكم في ما إذا كانت الدارة تقوم بالجمع أو الطرح؟",
        "options": [
            "باستخدام مسجل خاص",
            "عن طريق إشارة تحكم يتم إدخالها إلى بوابات XOR وإلى مدخل الحمل الأولي (Cin)",
            "بتغيير ترتيب المداخل",
            "بفصل الدارة إلى جزأين"
        ],
        "correctAnswerIndex": 1,
        "explanation": "يتم استخدام إشارة تحكم (لنسميها M). عندما M=0، تمرر بوابات XOR المعامل B كما هو ويكون Cin=0، فتتم عملية الجمع. عندما M=1، تقوم بوابات XOR بقلب بتات B ويكون Cin=1، مما يحقق عملية المتمم الثنائي، فتتم عملية الطرح."
    },
    {
        "question": "ماذا يحدث لمحتوى `AC` عند تنفيذ تعليمة `CIR` (Circulate Right)؟",
        "options": [
            "يتم إزاحة البتات لليمين مع إدخال 0 من اليسار",
            "يتم إزاحة البتات لليمين، وينتقل البت الأيمن (AC0) إلى البت الأيسر (AC15) وإلى قلاب الحمل E",
            "يتم إزاحة البتات لليمين، وينتقل بت الحمل E إلى البت الأيسر (AC15) وينتقل البت الأيمن (AC0) إلى E",
            "يتم تبديل النصف العلوي والسفلي من `AC`"
        ],
        "correctAnswerIndex": 2,
        "explanation": "تعليمة `CIR` تقوم بعملية دوران لليمين عبر قلاب الحمل E. البت الأيمن من AC يذهب إلى E، وما كان في E يذهب إلى البت الأيسر من AC، وجميع البتات الأخرى في AC تتحرك خانة واحدة لليمين."
    },
    {
        "question": "ما هي الميزة الرئيسية للإدخال/الإخراج المعتمد على المقاطعة (Interrupt-driven I/O) مقارنة بالإدخال/الإخراج المبرمج (Programmed I/O)؟",
        "options": [
            "أبسط في التنفيذ",
            "لا يتطلب عتاداً إضافياً",
            "يحرر المعالج من الانتظار في حلقات، مما يسمح له بتنفيذ مهام أخرى أثناء انتظار جهاز الإدخال/الإخراج",
            "أبطأ ولكنه أكثر دقة"
        ],
        "correctAnswerIndex": 2,
        "explanation": "بدلاً من أن يضيع المعالج وقته في حلقة انتظار للتحقق من جاهزية الجهاز، يسمح له نظام المقاطعات بمواصلة عمله على برنامج آخر. عندما يصبح الجهاز جاهزاً، يقوم بإرسال إشارة مقاطعة تجعل المعالج يتوقف مؤقتاً لخدمة الجهاز ثم يعود لعمله، مما يزيد من كفاءة النظام بشكل كبير."
    },
    {
        "question": "كم عدد البتات في مسجل `IR` و `DR` في الحاسب الأساسي؟",
        "options": [
            "12 بت",
            "8 بت",
            "16 بت",
            "32 بت"
        ],
        "correctAnswerIndex": 2,
        "explanation": "بما أن عرض كلمة الذاكرة هو 16 بت، فإن أي مسجل يتعامل مباشرة مع البيانات من الذاكرة أو إليها، مثل `IR` (الذي يحمل التعليمة) و `DR` (الذي يحمل البيانات)، يجب أن يكون عرضه 16 بت."
    },
    {
        "question": "أي عملية مصغرة تستخدم لنقل محتوى مسجل إلى ناقل مشترك؟",
        "options": [
            "BUS ← R",
            "R ← BUS",
            "M[R] ← BUS",
            "R ← R + 1"
        ],
        "correctAnswerIndex": 0,
        "explanation": "الصيغة `BUS ← R` في لغة نقل المسجلات تعني أن محتويات المسجل `R` (المصدر) يتم وضعها على الناقل المشترك."
    },
    {
        "question": "ما هي الوظيفة الأساسية للتعليمة `STA`؟",
        "options": [
            "تخزين قيمة من الذاكرة في `AC`",
            "تخزين قيمة `AC` في موقع بالذاكرة",
            "تخزين قيمة `PC` في الذاكرة",
            "تخزين حالة الأعلام (flags) في الذاكرة"
        ],
        "correctAnswerIndex": 1,
        "explanation": "تعليمة `STA` (Store Accumulator) تقوم بعملية عكسية لـ `LDA`. إنها تأخذ القيمة الحالية في المراكم `AC` وتكتبها في موقع الذاكرة المحدد بالعنوان الفعال."
    },
    {
        "question": "ما هي العبارة التي تصف \"السمات المعمارية\" (Architectural Attributes) للحاسب؟",
        "options": [
            "سرعة المعالج وحجم الذاكرة",
            "السمات التي لها تأثير مباشر على التنفيذ المنطقي للبرنامج، مثل مجموعة التعليمات وأنماط العنونة",
            "تفاصيل العتاد مثل إشارات التحكم وتقنية التصنيع",
            "نظام التشغيل المستخدم"
        ],
        "correctAnswerIndex": 1,
        "explanation": "السمات المعمارية هي الواجهة بين البرنامج والعتاد. هي ما يحتاج المبرمج (خاصة مبرمج لغة التجميع) إلى معرفته لكتابة برنامج يعمل بشكل صحيح. أما تفاصيل التنفيذ الداخلي فتعتبر جزءاً من \"التنظيم\"."
    },
    {
        "question": "عندما يتم تنفيذ `IF (FGI = 1) then (PC ← PC + 1)`، ماذا تسمى هذه التعليمة؟",
        "options": [
            "BSA",
            "BUN",
            "SKI",
            "INP"
        ],
        "correctAnswerIndex": 2,
        "explanation": "هذه هي العملية المصغرة لتعليمة `SKI` (Skip on Input Flag). إنها تتخطى التعليمة التالية إذا كانت راية الإدخال `FGI` مرفوعة، مما يشير إلى وجود حرف جديد جاهز للقراءة."
    },
    {
        "question": "ما هو دور `AND` gate في دارة التحكم لمسجل `AR`؟",
        "options": [
            "لجمع العناوين",
            "لدمج شروط التحكم المختلفة (مثل `R'` و `T0`) لتوليد إشارة تحكم نهائية مثل `LD` أو `CLR`",
            "لعمل إزاحة للعنوان",
            "لتخزين العنوان مؤقتاً"
        ],
        "correctAnswerIndex": 1,
        "explanation": "تُستخدم بوابات `AND` لتمثيل الشروط المنطقية. على سبيل المثال، لتفعيل تحميل `AR` من `PC` عند `T0` (في غير وضع المقاطعة)، يتم استخدام بوابة `AND` تجمع بين الإشارتين `R'` و `T0`. مخرج هذه البوابة يساهم في تفعيل `LD(AR)`."
    },
    {
        "question": "ما هو عدد وحدات الإضافة الكاملة (Full Adders) المطلوبة لبناء دارة جمع 16 بت؟",
        "options": [
            "1",
            "8",
            "16",
            "32"
        ],
        "correctAnswerIndex": 2,
        "explanation": "لبناء جامع تموجي (ripple-carry adder)، يتم استخدام وحدة جمع كاملة لكل بت. لذا لجمع عددين من 16 بت، نحتاج إلى 16 وحدة جمع كاملة، حيث يتم توصيل مخرج الحمل (Cout) لكل وحدة بمدخل الحمل (Cin) للوحدة التالية."
    },
    {
        "question": "ماذا تمثل `M[AR]` في لغة نقل المسجلات؟",
        "options": [
            "محتوى المسجل `AR`",
            "عنوان المسجل `AR`",
            "محتوى موقع الذاكرة الذي يشير إليه العنوان الموجود في `AR`",
            "عملية ضرب بين `M` و `AR`"
        ],
        "correctAnswerIndex": 2,
        "explanation": "الأقواس المربعة `[]` تستخدم للإشارة إلى محتوى موقع الذاكرة. لذا `M[AR]` تعني: اذهب إلى الذاكرة (`M`)، استخدم القيمة الموجودة في `AR` كعنوان، واقرأ البيانات الموجودة في ذلك الموقع."
    },
    {
        "question": "في مخطط تدفق دورة المقاطعة، ما هو أول شيء يتم التحقق منه؟",
        "options": [
            "قيمة `IEN`",
            "قيمة `R` (Interrupt flip-flop)",
            "قيمة `PC`",
            "قيمة `AC`"
        ],
        "correctAnswerIndex": 1,
        "explanation": "في بداية كل دورة تعليمة (بعد جلب وتنفيذ التعليمة السابقة)، يتم فحص القلاب `R`. إذا كان `R=0`، تستمر دورة التعليمات العادية (Fetch). إذا كان `R=1`، تبدأ دورة المقاطعة (Interrupt Cycle)."
    },
    {
        "question": "ما هي نتيجة `ADD OPR I` إذا كان `OPR` يحتوي على العنوان 200، والموقع 200 يحتوي على القيمة 300، والموقع 300 يحتوي على القيمة 50؟",
        "options": [
            "يتم إضافة 200 إلى AC",
            "يتم إضافة 300 إلى AC",
            "يتم إضافة 50 إلى AC",
            "يحدث خطأ في العنونة"
        ],
        "correctAnswerIndex": 2,
        "explanation": "الحرف `I` يعني عنونة غير مباشرة. العنوان في التعليمة هو 200. المعالج يذهب إلى الموقع 200 ويقرأ محتواه وهو 300. هذا هو العنوان الفعال. ثم يذهب المعالج إلى الموقع 300 ويقرأ محتواه وهو 50. هذه القيمة (50) هي التي تتم إضافتها إلى `AC`."
    },
    {
        "question": "ما هو الكود السداسي عشري لتعليمة `INP`؟",
        "options": [
            "F800",
            "F400",
            "F200",
            "F100"
        ],
        "correctAnswerIndex": 0,
        "explanation": "وفقًا لجدول التعليمات، `INP` هي تعليمة إدخال/إخراج، لذا الـ Opcode هو `111` والبت `I` هو `1` (مما يعطي `F` في الخانة اليسرى). البت المحدد لـ `INP` هو البت 11، مما يجعل الكود الكامل `1111 1000 0000 0000` أو `F800`."
    },
    {
        "question": "ما هي العملية التي تقوم بها تعليمة `CIL` (Circulate Left)؟",
        "options": [
            "إزاحة لليسار مع إدخال 0 من اليمين",
            "إزاحة لليسار مع الحفاظ على بت الإشارة",
            "دوران لليسار حيث ينتقل البت الأيسر إلى البت الأيمن مباشرة",
            "دوران لليسار عبر قلاب الحمل E"
        ],
        "correctAnswerIndex": 3,
        "explanation": "تعليمة `CIL` هي عكس `CIR`. تقوم بدوران البتات لليسار، حيث ينتقل البت الأيسر من AC إلى E، وما كان في E ينتقل إلى البت الأيمن من AC."
    },
    {
        "question": "أي من أنواع البرامج التالية يعتبر الأقرب إلى العتاد والأكثر انخفاضاً في المستوى؟",
        "options": [
            "برنامج مكتوب بلغة عالية المستوى (High-level)",
            "برنامج مكتوب بلغة التجميع (Symbolic)",
            "برنامج مكتوب بالكود الثنائي (Binary code)",
            "برنامج مكتوب بالكود السداسي عشري (Hexadecimal)"
        ],
        "correctAnswerIndex": 2,
        "explanation": "الكود الثنائي هو التمثيل المباشر للتعليمات كما يتم تخزينها وتنفيذها في العتاد. جميع الأنواع الأخرى (سداسي عشري، تجميع، لغات عالية المستوى) هي تمثيلات أكثر تجريداً وقابلية للقراءة من قبل الإنسان."
    },
    {
        "question": "ما هي وظيفة `CLR(AR)` في تصميم دارة التحكم لمسجل AR؟",
        "options": [
            "تحميل قيمة جديدة في AR",
            "زيادة قيمة AR",
            "مسح قيمة AR وجعلها صفراً",
            "عكس بتات AR"
        ],
        "correctAnswerIndex": 2,
        "explanation": "إشارة التحكم CLR (Clear) تستخدم لإعادة ضبط المسجل، أي وضع القيمة صفر في جميع بتاته. في تصميم دارة التحكم لـ AR، يتم تفعيل `CLR(AR)` بناءً على شروط معينة مثل `RT0`."
    },
    {
        "question": "أي من التالي ليس من مكونات العتاد الأساسية للحاسب الموصوف؟",
        "options": [
            "وحدة ذاكرة 4096 × 16",
            "ناقل مشترك 16 بت",
            "ذاكرة مخبئية (Cache memory)",
            "مسجل المراكم AC"
        ],
        "correctAnswerIndex": 2,
        "explanation": "الحاسب الأساسي الموصوف في المحاضرات هو تصميم تعليمي مبسط. لا يتضمن مفاهيم متقدمة مثل الذاكرة المخبئية (Cache) أو خطوط الأنابيب (Pipelining)."
    },
    {
        "question": "ما هي نتيجة `SNA` (Skip if AC is Negative) إذا كان `AC` يحتوي على `1000 0000 0000 0001`؟",
        "options": [
            "يتم تخطي التعليمة التالية",
            "لا يتم تخطي التعليمة التالية",
            "يتم مسح AC",
            "يتم عكس إشارة AC"
        ],
        "correctAnswerIndex": 0,
        "explanation": "تعليمة `SNA` تتحقق من بت الإشارة في `AC`، وهو البت الأكثر أهمية (MSB)، أي `AC(15)`. إذا كان هذا البت `1`، يعتبر الرقم سالباً ويتم تخطي التعليمة التالية. في هذه الحالة، البت 15 هو `1`."
    },
    {
        "question": "ما هو حجم مسجل `INPR`؟",
        "options": [
            "16 بت",
            "12 بت",
            "8 بت",
            "1 بت"
        ],
        "correctAnswerIndex": 2,
        "explanation": "مسجل `INPR` مصمم لاستقبال حرف واحد في كل مرة من جهاز الإدخال. عادة ما يتم تمثيل الحروف باستخدام 8 بت (مثل ASCII)، لذلك حجم `INPR` هو 8 بت."
    },
    {
        "question": "ماذا تفعل تعليمة `AND M` إذا كان `M` هو عنوان لموقع ذاكرة يحتوي على `0000 1111 0000 1111` و `AC` يحتوي على `1111 1111 0000 0000`؟",
        "options": [
            "سيصبح `AC` يساوي `1111 1111 0000 1111`",
            "سيصبح `AC` يساوي `0000 1111 0000 0000`",
            "سيصبح `AC` يساوي `1111 0000 1111 0000`",
            "لن يتغير `AC`"
        ],
        "correctAnswerIndex": 1,
        "explanation": "عملية `AND` تنتج `1` فقط إذا كان كلا البتين المقابلين `1`. `1111111100000000` AND `0000111100001111` = `0000111100000000`. هذه العملية تستخدم غالبًا كقناع (mask) لمسح أجزاء من المسجل."
    },
    {
        "question": "في دورة المقاطعة، ما هي العملية المصغرة التي تحدث عند `RT2`؟",
        "options": [
            "PC ← PC + 1, IEN ← 0, R ← 0, SC ← 0",
            "M[AR] ← TR, PC ← 0",
            "AR ← 0, TR ← PC",
            "IR ← M[AR]"
        ],
        "correctAnswerIndex": 0,
        "explanation": "عند `RT2` في دورة المقاطعة، يتم إعداد الحاسب للقفز إلى روتين الخدمة. يتم زيادة `PC` إلى `1`، ويتم تعطيل المقاطعات (`IEN ← 0`)، ومسح طلب المقاطعة (`R ← 0`)، ومسح عداد التسلسل (`SC ← 0`) للبدء من جديد."
    },
    {
        "question": "ما هو عدد القلابات (Flip-Flops) المستخدمة في تصميم الحاسب الأساسي (بدون حساب المسجلات)؟",
        "options": [
            "3",
            "5",
            "7",
            "9"
        ],
        "correctAnswerIndex": 2,
        "explanation": "تذكر شريحة \"Flip-Flops(status)\" القلابات التالية: I, S, E, R, IEN, FGI, FGO. مجموعها 7 قلابات حالة."
    },
    {
        "question": "إذا كان `AC = 0`، أي من التعليمات التالية ستؤدي إلى تخطي التعليمة التالية؟",
        "options": [
            "SPA",
            "SNA",
            "SZA",
            "SZE"
        ],
        "correctAnswerIndex": 2,
        "explanation": "`SZA` (Skip if AC is Zero) هي التعليمة التي تتحقق مما إذا كانت قيمة المراكم `AC` تساوي صفرًا. إذا كان الشرط محققًا، يتم تخطي التعليمة التالية."
    },
    {
        "question": "ما هي الصيغة المنطقية لشرط تحميل مسجل `AR` من الناقل في حالة العنونة غير المباشرة؟",
        "options": [
            "D7'IT3",
            "R'T0",
            "D7IT'3",
            "R'T2"
        ],
        "correctAnswerIndex": 0,
        "explanation": "في حالة العنونة غير المباشرة (I=1) لتعليمة مرجعية للذاكرة (D7'=1)، يتم تحميل العنوان الفعال من الذاكرة إلى AR عند T3. لذا الشرط هو D7'IT3."
    },
    {
        "question": "ما هو الاختلاف الرئيسي بين `BUN` و `BSA`؟",
        "options": [
            "`BUN` مشروط و `BSA` غير مشروط",
            "`BSA` يحفظ عنوان العودة قبل القفز، بينما `BUN` لا يفعل ذلك",
            "`BSA` يقفز إلى عنوان في `AC`، بينما `BUN` يقفز إلى عنوان في التعليمة",
            "`BUN` أسرع من `BSA`"
        ],
        "correctAnswerIndex": 1,
        "explanation": "كلاهما تعليمات قفز غير مشروط. لكن `BSA` مصممة خصيصًا لاستدعاء الروتينات الفرعية، لذا تتضمن خطوة إضافية وهي تخزين `PC` الحالي في الذاكرة للسماح بالعودة لاحقًا باستخدام قفزة غير مباشرة."
    },
    {
        "question": "ما هو دور مسجل `OUTR`؟",
        "options": [
            "يستقبل البيانات من لوحة المفاتيح",
            "يخزن البيانات مؤقتًا قبل إرسالها إلى جهاز الإخراج مثل الطابعة",
            "يتحكم في عمليات الإخراج",
            "يولد طلبات المقاطعة للإخراج"
        ],
        "correctAnswerIndex": 1,
        "explanation": "مسجل `OUTR` (Output Register) يعمل كمخزن مؤقت (buffer). يتم نقل البيانات إليه من `AC`، ثم يتم إرسالها بشكل تسلسلي أو متوازي إلى جهاز الإخراج."
    },
    {
        "question": "ما هو أكبر عدد من العمليات المصغرة يمكن أن تحدث في دورة تعليمة واحدة (بدون مقاطعة)؟",
        "options": [
            "3 (T0, T1, T2)",
            "4 (حتى T3)",
            "تعتمد على التعليمة، مثلاً ISZ تحتاج إلى T6",
            "دائماً 2"
        ],
        "correctAnswerIndex": 2,
        "explanation": "دورة الجلب وفك التشفير تستغرق حتى T2 أو T3. لكن دورة التنفيذ تختلف. تعليمة مثل `BUN` تنتهي عند T4، بينما تعليمة أكثر تعقيدًا مثل `ISZ` تتطلب خطوات إضافية (قراءة، زيادة، كتابة، فحص) وتستمر حتى T6."
    },
    {
        "question": "لماذا نحتاج إلى أعلام (flags) مثل FGI و FGO؟",
        "options": [
            "لتخزين نتائج العمليات الحسابية",
            "لتزامن فرق السرعة بين المعالج البطيء وأجهزة الإدخال/الإخراج السريعة",
            "لتزامن فرق السرعة بين المعالج السريع وأجهزة الإدخال/الإخراج البطيئة",
            "لعد عدد عمليات الإدخال/الإخراج"
        ],
        "correctAnswerIndex": 2,
        "explanation": "المعالج أسرع بكثير من الأجهزة الطرفية الميكانيكية مثل لوحة المفاتيح أو الطابعة. الأعلام هي آلية تزامن تسمح للمعالج بمعرفة متى يكون الجهاز جاهزًا لإرسال أو استقبال البيانات، لتجنب فقدان البيانات أو الكتابة فوقها."
    },
    {
        "question": "ما هي القيمة التي يحتويها حقل العنوان في تعليمة مرجعية للمسجل مثل `CLA`؟",
        "options": [
            "عنوان المسجل",
            "يتم استخدام حقل العنوان لتحديد العملية المصغرة المحددة (مثل أي بت يتم تفعيله)",
            "يكون دائمًا صفرًا",
            "يحتوي على عنوان التعليمة التالية"
        ],
        "correctAnswerIndex": 1,
        "explanation": "في التعليمات المرجعية للمسجل، يكون الـ opcode هو `111` و `I=0`. البتات الـ 12 المتبقية (التي كانت مخصصة للعنوان) تستخدم الآن لتحديد أي من عمليات المسجل المتعددة سيتم تنفيذها. كل بت (من 0 إلى 11) يقابل عملية مختلفة."
    },
    {
        "question": "ما هي وظيفة `Adder and Logic circuit` المتصلة بـ AC؟",
        "options": [
            "توليد عناوين الذاكرة",
            "تنفيذ العمليات الحسابية (مثل الجمع والطرح) والمنطقية (مثل AND, OR) والتحكم في `AC`",
            "التحكم في ناقل النظام",
            "فك تشفير التعليمات"
        ],
        "correctAnswerIndex": 1,
        "explanation": "هذه الدارة هي قلب وحدة المعالجة. تقوم بتنفيذ جميع العمليات الحسابية والمنطقية والإزاحة. تأخذ مدخلاتها عادةً من `AC` و `DR` وتضع نتيجتها مرة أخرى في `AC`."
    },
    {
        "question": "ما هي التعليمة الزائفة التي تستخدم لتعريف ثابت عشري موقّع (signed decimal)؟",
        "options": [
            "ORG",
            "HEX",
            "END",
            "DEC"
        ],
        "correctAnswerIndex": 3,
        "explanation": "`DEC` توجه المجمّع لأخذ الرقم العشري المحدد وتحويله إلى تمثيله الثنائي (عادةً باستخدام المتمم الثنائي للأرقام السالبة) وتخزينه في الذاكرة."
    },
    {
        "question": "ما هي العملية `DR ← M[AR]`؟",
        "options": [
            "كتابة في الذاكرة (Memory Write)",
            "قراءة من الذاكرة (Memory Read)",
            "نقل من مسجل إلى مسجل",
            "عملية حسابية"
        ],
        "correctAnswerIndex": 1,
        "explanation": "هذه العملية تمثل قراءة من الذاكرة. يتم استخدام العنوان الموجود في `AR` لتحديد الموقع في الذاكرة، ويتم نقل محتوى هذا الموقع إلى مسجل البيانات `DR`."
    },
    {
        "question": "ما هو أول إجراء يتم في دورة المقاطعة بعد التحقق من وجود طلب مقاطعة صالح؟",
        "options": [
            "تنفيذ روتين خدمة المقاطعة",
            "تخزين محتوى `PC` في `TR`، ونقل عنوان روتين المقاطعة إلى `PC`",
            "تخزين `TR` في الذاكرة عند العنوان `0`",
            "تخزين محتوى `AC` في الذاكرة"
        ],
        "correctAnswerIndex": 1,
        "explanation": "في دورة المقاطعة عند `RT0`، يتم تنفيذ عمليتين في نفس الوقت: `AR ← 0` لتحضير لكتابة عنوان العودة، و`TR ← PC` لحفظ `PC` مؤقتاً."
    },
    {
        "question": "ما هي التعليمة التي تقوم بعكس قيمة قلاب الحمل E؟",
        "options": [
            "CLE",
            "CME",
            "CMA",
            "CIR"
        ],
        "correctAnswerIndex": 1,
        "explanation": "`CME` (Complement E) هي تعليمة مرجعية للمسجل تقوم بعكس (complement) قيمة البت المخزن في قلاب الحمل E."
    },
    {
        "question": "ما هو عدد خطوط البيانات في الناقل المشترك للحاسب الأساسي؟",
        "options": [
            "8",
            "12",
            "16",
            "32"
        ],
        "correctAnswerIndex": 2,
        "explanation": "بما أن عرض المسجلات الرئيسية (مثل AC, DR, IR) وعرض كلمة الذاكرة هو 16 بت، فإن الناقل المشترك الذي يربط بينها يجب أن يكون بعرض 16 بت لنقل كلمة كاملة في عملية واحدة."
    },
    {
        "question": "ما هو الشرط المنطقي لتفعيل `LD(IR)` (تحميل مسجل التعليمات)؟",
        "options": [
            "R'T0",
            "R'T1",
            "R'T2",
            "D7'IT3"
        ],
        "correctAnswerIndex": 1,
        "explanation": "يتم تحميل مسجل التعليمات IR بالتعليمة من الذاكرة خلال مرحلة الجلب. هذا يحدث عند إشارة التوقيت T1 في دورة التعليمات العادية (R'=1)، حيث يتم تنفيذ العملية `IR ← M[AR]`."
    },
    {
        "question": "في أي مرحلة من دورة التعليمة يتم زيادة عداد البرنامج `PC`؟",
        "options": [
            "T0",
            "T1",
            "T2",
            "T4"
        ],
        "correctAnswerIndex": 1,
        "explanation": "يتم زيادة `PC` عند T1، في نفس الوقت الذي يتم فيه قراءة التعليمة الحالية من الذاكرة إلى `IR`. هذا يضمن أن `PC` يشير بالفعل إلى التعليمة التالية في التسلسل قبل أن تبدأ عملية فك تشفير وتنفيذ التعليمة الحالية."
    },
    {
        "question": "ما هو دور مفكك الشفرة (decoder) بحجم 4*16 في وحدة التحكم؟",
        "options": [
            "فك شفرة رمز العملية (opcode)",
            "توليد إشارات التوقيت T0 إلى T15 من مخرجات عداد التسلسل SC",
            "اختيار واحد من 16 مسجلاً",
            "تحويل عنوان 16 بت إلى 4 بت"
        ],
        "correctAnswerIndex": 1,
        "explanation": "يأخذ هذا المفكك المخرجات الأربعة لعداد التسلسل (SC) ويقوم بتفعيل واحد فقط من مخارجه الستة عشر في كل مرة، مما يولد تسلسل إشارات التوقيت T0, T1, T2, ... T15."
    },
    {
        "question": "أي من التالي يصف `Shift-Left Register R`؟",
        "options": [
            "R ← shl R",
            "R ← shr R",
            "R ← cil R",
            "R ← cir R"
        ],
        "correctAnswerIndex": 0,
        "explanation": "الرمز `shl` هو الاختصار المستخدم في المحاضرات لـ `shift-left`، وهي عملية إزاحة منطقية لليسار."
    },
    {
        "question": "لماذا يتم التواصل بين AC والمحطة الطرفية (terminal) بشكل متوازٍ بينما يتم التواصل بين المحطة الطرفية و INPR/OUTR بشكل تسلسلي؟",
        "options": [
            "لأن النقل المتوازي أبطأ",
            "لأن الناقل الداخلي للحاسب (common bus) متوازٍ لنقل البيانات بسرعة، بينما خطوط الاتصال الخارجية غالبًا ما تكون تسلسلية لتقليل عدد الأسلاك",
            "لأن INPR و OUTR لا يدعمان النقل المتوازي",
            "لزيادة الأمان في نقل البيانات"
        ],
        "correctAnswerIndex": 1,
        "explanation": "داخل الحاسب، السرعة هي الأهم، لذا يتم استخدام النقل المتوازي (16 بت في المرة الواحدة) عبر الناقل المشترك. أما الاتصال بالأجهزة الطرفية البعيدة، فغالبًا ما يكون تسلسليًا (بت واحد في كل مرة) لأنه يتطلب عددًا أقل بكثير من الأسلاك وهو عملي للمسافات الطويلة."
    },
    {
        "question": "ما هي نتيجة تنفيذ `INC AC` إذا كان `AC` يحتوي على `0000 1111`؟",
        "options": [
            "0000 1110",
            "0001 0000",
            "1111 0000",
            "0000 1111"
        ],
        "correctAnswerIndex": 1,
        "explanation": "`INC` (Increment) تضيف 1 إلى قيمة المراكم. `0000 1111` (15 بالعشري) + 1 = `0001 0000` (16 بالعشري)."
    },
    {
        "question": "ماذا يحدث عند تنفيذ تعليمة `IOF` (Interrupt Off)؟",
        "options": [
            "IEN ← 1",
            "FGI ← 0",
            "FGO ← 0",
            "IEN ← 0"
        ],
        "correctAnswerIndex": 3,
        "explanation": "تعليمة `IOF` تقوم بتعطيل نظام المقاطعات عن طريق مسح (وضع 0) قلاب تمكين المقاطعات `IEN`."
    },
    {
        "question": "ما هو دور الـ `clock` في دارة المسجل؟",
        "options": [
            "لتحديد البيانات التي سيتم تحميلها",
            "لمسح المسجل",
            "لتحديد اللحظة التي يتم فيها تحديث قيمة المسجل (عادةً عند الحافة الصاعدة أو الهابطة للنبضة)",
            "لزيادة قيمة المسجل"
        ],
        "correctAnswerIndex": 2,
        "explanation": "المسجلات هي دوائر تتابعية متزامنة. إشارة الساعة `clock` تزامن عملية تغيير الحالة. لا يتم تحميل قيمة جديدة أو تغيير القيمة الحالية إلا عند وصول نبضة الساعة، مما يضمن استقرار النظام."
    },
    {
        "question": "ما هو عدد خطوط المداخل والمخارج الكلي لمفكك شفرة الـ opcode في الحاسب الأساسي؟",
        "options": [
            "3 مداخل، 3 مخارج",
            "3 مداخل، 8 مخارج",
            "8 مداخل، 3 مخارج",
            "4 مداخل، 16 مخرج"
        ],
        "correctAnswerIndex": 1,
        "explanation": "يتم استخدام البتات 12، 13, 14 من `IR` كمدخلات، أي 3 مداخل. هذه المداخل يمكن أن تشكل 8 تركيبات مختلفة، لذا فإن المفكك له 8 مخارج (D0 إلى D7)."
    },
    {
        "question": "أي من هذه التعليمات لا يغير محتوى المراكم `AC`؟",
        "options": [
            "ADD M",
            "STA M",
            "CLA",
            "INC"
        ],
        "correctAnswerIndex": 1,
        "explanation": "تعليمة `STA` (Store Accumulator) تقرأ محتوى `AC` وتكتبه في الذاكرة. قيمة `AC` نفسها لا تتغير خلال هذه العملية. بينما `ADD`, `CLA`, `INC` جميعها تعدل قيمة `AC`."
    },
    {
        "question": "في أي سياق يتم استخدام العملية المصغرة `AR ← IR(0-11)`؟",
        "options": [
            "خلال دورة الجلب",
            "خلال دورة فك التشفير لتعليمة مرجعية للمسجل أو إدخال/إخراج",
            "خلال تنفيذ تعليمة `BSA`",
            "عند حدوث مقاطعة"
        ],
        "correctAnswerIndex": 1,
        "explanation": "عندما تكون التعليمة غير مرجعية للذاكرة (opcode=`111`)، فإن البتات من 0 إلى 11 لا تمثل عنوانًا. يتم نقلها إلى `AR` خلال `T2` لتستخدم لاحقًا في `T3` لتحديد العملية المصغرة المحددة (e.g., via checking Bi = IR(i))."
    },
    {
        "question": "ما هي العملية الأساسية التي تتم عند إشارة التوقيت `T2` في دورة التعليمات العادية؟",
        "options": [
            "زيادة عداد البرنامج",
            "جلب التعليمة من الذاكرة",
            "فك تشفير رمز العملية، وتحديد نوع التعليمة، ونقل العنوان إلى AR",
            "تنفيذ التعليمة"
        ],
        "correctAnswerIndex": 2,
        "explanation": "`T2` هي مرحلة فك التشفير. فيها، يتم تحليل البتات في `IR` لتحديد ما هي التعليمة (`D0...D7 ← Decode IR(12-14)`), وتحديد نمط العنونة (`I ← IR(15)`), ونقل جزء العنوان من التعليمة إلى مسجل العنوان (`AR ← IR(0-11)`)."
    },
    {
        "question": "إذا كان `PC` يحتوي على 250، فما هو محتوى `TR` و `AR` بعد `RT0` في دورة المقاطعة؟",
        "options": [
            "`TR` = 250, `AR` = 0",
            "`TR` = 0, `AR` = 250",
            "`TR` = 251, `AR` = 0",
            "`TR` = 250, `AR` = 250"
        ],
        "correctAnswerIndex": 0,
        "explanation": "في `RT0`، يتم تنفيذ `AR ← 0` و `TR ← PC` بشكل متزامن. لذا `AR` يصبح 0 استعدادًا لتخزين عنوان العودة، و `TR` يحفظ القيمة الأصلية لـ `PC` وهي 250."
    },
    {
        "question": "ماذا تعني `SC ← 0`؟",
        "options": [
            "زيادة عداد التسلسل",
            "تحميل قيمة في عداد التسلسل",
            "مسح عداد التسلسل إلى الصفر",
            "لا شيء، عملية غير صالحة"
        ],
        "correctAnswerIndex": 2,
        "explanation": "هذه العملية المصغرة تعني مسح (Clear) عداد التسلسل (Sequence Counter)، مما يعيده إلى الحالة الأولية ليبدأ توليد إشارات التوقيت من `T0` مرة أخرى في دورة التعليمات التالية."
    },
    {
        "question": "ما هو الفرق بين `CMA` و `CME`؟",
        "options": [
            "`CMA` تعكس بتات المراكم `AC`، بينما `CME` تعكس بت قلاب الحمل `E`",
            "`CMA` هي مسح المراكم، و `CME` هي مسح قلاب الحمل",
            "كلاهما يعكس بتات المراكم، لكن `CME` أسرع",
            "لا يوجد فرق"
        ],
        "correctAnswerIndex": 0,
        "explanation": "`CMA` هي اختصار لـ Complement Accumulator، بينما `CME` هي اختصار لـ Complement E. كل منهما يؤثر على مكون مختلف."
    },
    {
        "question": "أي جزء من الحاسب الأساسي مسؤول عن تفسير التعليمات وتوليد إشارات التحكم اللازمة لتنفيذها؟",
        "options": [
            "الذاكرة الرئيسية",
            "وحدة الحساب والمنطق (ALU)",
            "الناقل المشترك",
            "وحدة التحكم (Control Unit)"
        ],
        "correctAnswerIndex": 3,
        "explanation": "وحدة التحكم هي 'عقل' الحاسب. تأخذ التعليمة من `IR`، وتستخدم مفككات الشفرة وعداد التسلسل لتوليد تسلسل دقيق من إشارات التحكم التي توجه بقية المكونات (المسجلات، ALU، الذاكرة) لتنفيذ العملية المصغرة المطلوبة."
    },
    {
        "question": "أي نوع من الأجهزة هو العداد (Counter)؟",
        "options": [
            "دارة تركيبية",
            "دارة تتابعية",
            "جهاز إدخال/إخراج",
            "وحدة ذاكرة"
        ],
        "correctAnswerIndex": 1,
        "explanation": "العداد هو دارة تتابعية لأنه يجب أن 'يتذكر' حالته الحالية (العد الحالي) ليتمكن من الانتقال إلى الحالة التالية عند وصول نبضة ساعة. يعتمد خرجه على حالته السابقة ومدخلاته."
    },
    {
        "question": "ما هو عدد خطوط التحكم (S0, S1, S2) اللازمة لاختيار واحد من 8 مصادر على ناقل مشترك؟",
        "options": [
            "2",
            "3",
            "4",
            "8"
        ],
        "correctAnswerIndex": 1,
        "explanation": "لاختيار واحد من 8 مصادر، نحتاج إلى 3 خطوط تحكم (اختيار) لأن 2^3 = 8. كل تركيبة من قيم هذه الخطوط الثلاثة (من 000 إلى 111) تختار مصدرًا مختلفًا."
    },
    {
        "question": "إذا كان `AC` يحتوي على `0000 0000 0000 0001`، ماذا سيحدث عند تنفيذ تعليمة `ISZ` على عنوان يحتوي على `1111 1111 1111 1111` (-1)؟",
        "options": [
            "سيصبح الموقع `0` وسيتم تخطي التعليمة التالية",
            "سيصبح الموقع `0` ولن يتم التخطي",
            "سيحدث فيضان (overflow) ولن يتغير الموقع",
            "سيصبح الموقع `1` وسيتم التخطي"
        ],
        "correctAnswerIndex": 0,
        "explanation": "التعليمة تقرأ -1 من الذاكرة، تضيف إليه 1، فتصبح النتيجة 0. يتم إعادة كتابة 0 في الذاكرة. بما أن النتيجة هي صفر، يتم زيادة `PC` مرة إضافية، مما يؤدي إلى تخطي التعليمة التالية."
    },
    {
        "question": "ما هو دور `Receiver interface` في مخطط الإدخال/الإخراج؟",
        "options": [
            "إرسال البيانات إلى الطابعة",
            "تخزين البيانات المرسلة",
            "تحويل البيانات من الشكل التسلسلي (القادم من لوحة المفاتيح) إلى الشكل المتوازي وتخزينها في INPR",
            "التحكم في `FGI`"
        ],
        "correctAnswerIndex": 2,
        "explanation": "واجهة المستقبل (Receiver interface) هي الدارة التي تستقبل البتات بشكل تسلسلي من خط الاتصال، وتجمعها لتكوين بايت كامل (8 بت)، ثم تقوم بتحميل هذا البايت بشكل متوازٍ في مسجل الإدخال `INPR`."
    },
    {
        "question": "ما هي العملية `AC ← AC'`؟",
        "options": [
            "مسح المراكم",
            "متمم المراكم (Complement)",
            "زيادة المراكم",
            "إزاحة المراكم"
        ],
        "correctAnswerIndex": 1,
        "explanation": "الرمز ' (prime) أو الشريط العلوي يستخدم للدلالة على عملية المتمم الأحادي (1's complement) أو العكس المنطقي (NOT). هذه العملية تنفذها تعليمة `CMA`."
    },
    {
        "question": "ما هو الحد الأقصى لعدد تعليمات المسجل والإدخال/الإخراج التي يمكن تعريفها؟",
        "options": [
            "8 لكل منهما",
            "12 لكل منهما",
            "16 لكل منهما",
            "يعتمد على التصميم"
        ],
        "correctAnswerIndex": 1,
        "explanation": "عندما يكون الـ opcode هو `111`، يتم استخدام البتات من 0 إلى 11 لتحديد العملية المحددة. هذا يوفر 12 بتًا، مما يسمح نظريًا بـ 2^12 عملية مختلفة، ولكن في هذا التصميم، كل بت (من 0 إلى 11) يحدد تعليمة واحدة، مما يسمح بـ 12 تعليمة مختلفة لكل نوع (مسجل أو إدخال/إخراج)."
    },
    {
        "question": "ما هي الخطوة الأولى في تصميم دارة التحكم لمسجل ما؟",
        "options": [
            "رسم المخطط المنطقي",
            "اختيار نوع القلابات",
            "تحديد جميع العمليات المصغرة من جدول تعليمات الحاسب التي تؤثر على هذا المسجل",
            "كتابة معادلات VHDL"
        ],
        "correctAnswerIndex": 2,
        "explanation": "لتصميم دارة التحكم، يجب أولاً معرفة ما هي العمليات التي يجب أن يدعمها المسجل. يتم ذلك عن طريق مسح جميع تعليمات الحاسب واستخراج كل العمليات المصغرة (مثل التحميل، الزيادة، المسح، الإزاحة) التي تستخدم هذا المسجل كوجهة."
    },
    {
        "question": "لماذا لا توجد عملية `DR ← DR + 1` ضمن تصميم دارة التحكم لـ DR؟",
        "options": [
            "لأن DR لا يمكن تعديله",
            "لأن `DR ← DR + 1` غير ممكنة في العتاد",
            "لأن لا توجد تعليمة في مجموعة التعليمات تتطلب زيادة `DR`. الزيادة تحدث فقط في `PC` و `AC` وكلمات الذاكرة عبر `ISZ`",
            "لأن الزيادة تتم فقط من خلال `AC`"
        ],
        "correctAnswerIndex": 2,
        "explanation": "يتم تصميم دوائر التحكم لتنفيذ مجموعة التعليمات المحددة فقط. في مجموعة تعليمات الحاسب الأساسي، لا توجد تعليمة تتطلب زيادة مسجل البيانات `DR` بشكل مباشر. هو يعمل فقط كمخزن مؤقت للبيانات من وإلى الذاكرة والمراكم."
    },
    {
        "question": "ماذا يحدث عند تنفيذ تعليمة `SKO` إذا كانت الطابعة مشغولة؟",
        "options": [
            "يتم تخطي التعليمة التالية",
            "لا يتم تخطي التعليمة التالية، ويستمر البرنامج في الانتظار",
            "يتم إرسال البيانات على أي حال",
            "يتم تفعيل مقاطعة"
        ],
        "correctAnswerIndex": 1,
        "explanation": "إذا كانت الطابعة مشغولة، فإن راية الإخراج `FGO` ستكون `0`. تعليمة `SKO` (Skip if FGO=1) لن يتحقق شرطها، وبالتالي لن يتم التخطي. عادة ما يتبعها تعليمة قفز (`BUN`) تعيد التنفيذ إلى `SKO` مرة أخرى، مما يشكل حلقة انتظار."
    },
    {
        "question": "ما هي البنية الأساسية لخلية ذاكرة SRAM؟",
        "options": [
            "مكثف وترانزستور",
            "قلاب (flip-flop) لتخزين البت",
            "بوابة AND فقط",
            "مقاومة ومحث"
        ],
        "correctAnswerIndex": 1,
        "explanation": "تستخدم خلية SRAM عادةً دائرة قلاب (مكونة من عدة ترانزستورات) لتخزين بت واحد. هذه الدارة تحافظ على حالتها (0 أو 1) طالما أن الطاقة متوفرة، ولا تحتاج إلى تحديث."
    },
    {
        "question": "ما هي الميزة الرئيسية للعنونة غير المباشرة؟",
        "options": [
            "أسرع من العنونة المباشرة",
            "تسمح بتوفير مساحة في التعليمة",
            "توفر مرونة أكبر في البرمجة، مثل استخدام المؤشرات (pointers) والجداول",
            "أبسط في التنفيذ على مستوى العتاد"
        ],
        "correctAnswerIndex": 2,
        "explanation": "العنونة غير المباشرة تسمح للبرنامج بتغيير العنوان الذي يشير إليه دون تغيير التعليمة نفسها. هذا هو أساس عمل المؤشرات، المصفوفات الديناميكية، وتمرير المعلمات إلى الروتينات الفرعية بالمرجعية، مما يضيف قوة ومرونة كبيرة للبرمجة."
    },
    {
        "question": "ما هو عدد خطوط العناوين وخطوط البيانات في وحدة الذاكرة 4096x16؟",
        "options": [
            "16 خط عنوان، 4096 خط بيانات",
            "12 خط عنوان، 16 خط بيانات",
            "16 خط عنوان، 12 خط بيانات",
            "4096 خط عنوان، 16 خط بيانات"
        ],
        "correctAnswerIndex": 1,
        "explanation": "الرقم الأول (4096) يمثل عدد الكلمات، ولعنونتها نحتاج 12 خط عنوان (2^12 = 4096). الرقم الثاني (16) يمثل حجم كل كلمة بالبت، وهو ما يحدد عدد خطوط البيانات."
    },
    {
        "question": "في مخطط الحاسب الأساسي، من أين يأتي دخل `Adder and Logic circuit`؟",
        "options": [
            "من `AC` و `DR` و `INPR`",
            "فقط من `AC` و `DR`",
            "فقط من الذاكرة",
            "من `PC` و `AR`"
        ],
        "correctAnswerIndex": 0,
        "explanation": "يظهر المخطط أن وحدة الحساب والمنطق تأخذ مدخلاتها من ثلاثة مصادر رئيسية: المراكم `AC`، مسجل البيانات `DR` (للبيانات من الذاكرة)، ومسجل الإدخال `INPR` (للبيانات من جهاز الإدخال)."
    },
    {
        "question": "أي من التالي ليس نوعاً من التعليمات في تصنيف 'Instruction Set Completeness'؟",
        "options": [
            "Functional Instructions",
            "Transfer Instructions",
            "Control Instructions",
            "Debugging Instructions"
        ],
        "correctAnswerIndex": 3,
        "explanation": "المجموعات الرئيسية التي تضمن اكتمال مجموعة التعليمات هي التعليمات الوظيفية (حسابية/منطقية)، تعليمات النقل (بين المسجلات والذاكرة)، وتعليمات التحكم (لتغيير تدفق البرنامج). تعليمات التصحيح (Debugging) هي مفهوم برمجي أعلى مستوى وليست فئة أساسية من تعليمات المعالج."
    },
    {
        "question": "ما هي العملية المصغرة التي تنفذ عند T1 في دورة المقاطعة (`RT1`)؟",
        "options": [
            "M[AR] ← TR, PC ← 0",
            "PC ← PC + 1",
            "IR ← M[AR]",
            "AC ← 0"
        ],
        "correctAnswerIndex": 0,
        "explanation": "عند `RT1`، يتم تخزين عنوان العودة (الذي تم حفظه في `TR`) في موقع الذاكرة `0` (الذي تم تحديد عنوانه في `AR`). وفي نفس الوقت، يتم مسح `PC` استعدادًا لتحميله بالعنوان `1` في الخطوة التالية."
    },
    {
        "question": "ماذا تفعل التعليمة الزائفة `HEX`؟",
        "options": [
            "تنفذ عملية حسابية سداسية عشرية",
            "تخبر المجمع بأن الرقم التالي هو رقم سداسي عشري يجب تحويله إلى ثنائي",
            "تطبع قيمة سداسية عشرية",
            "تنهي البرنامج"
        ],
        "correctAnswerIndex": 1,
        "explanation": "`HEX` هي توجيه للمجمع لتعريف ثابت. تخبره بتفسير القيمة التي تليها كنظام سداسي عشري وتحويلها إلى قيمتها الثنائية المقابلة لتخزينها في الذاكرة."
    },
    {
        "question": "ما هي وظيفة `Transmitter interface` في مخطط الإدخال/الإخراج؟",
        "options": [
            "استقبال البيانات من لوحة المفاتيح",
            "تحويل البيانات من الشكل المتوازي (من `OUTR`) إلى الشكل التسلسلي لإرسالها إلى الطابعة",
            "التحكم في `FGO`",
            "تخزين البيانات بشكل دائم"
        ],
        "correctAnswerIndex": 1,
        "explanation": "واجهة المرسل (Transmitter interface) تأخذ بايت كامل بشكل متوازٍ من مسجل الإخراج `OUTR` ثم تقوم بإرساله بتًا تلو الآخر (بشكل تسلسلي) عبر خط الاتصال إلى الجهاز الطرفي."
    },
    {
        "question": "أي مسجل يتم تعديله مباشرة بواسطة تعليمة `BUN`؟",
        "options": [
            "AC",
            "DR",
            "AR",
            "PC"
        ],
        "correctAnswerIndex": 3,
        "explanation": "تعليمة `BUN` (Branch Unconditionally) هي تعليمة تحكم تغير تدفق البرنامج. تقوم بذلك عن طريق تحميل عنوان جديد مباشرة في عداد البرنامج `PC`."
    },
    {
        "question": "ما هو دور `select` في الناقل المبني باستخدام `three-state buffers`؟",
        "options": [
            "يحدد البيانات التي سيتم نقلها",
            "يتم إدخاله إلى مفكك شفرة (decoder) لتفعيل خط تحكم واحد فقط، والذي بدوره يمكّن مجموعة البوابات الخاصة بالمسجل المصدر المطلوب",
            "يعمل كإشارة ساعة",
            "يحدد اتجاه تدفق البيانات"
        ],
        "correctAnswerIndex": 1,
        "explanation": "للسماح لواحد فقط من المسجلات بوضع بياناته على الناقل، يتم استخدام مفكك شفرة. تأخذ خطوط الاختيار `select` كمدخل وتفعل مخرجًا واحدًا فقط. هذا المخرج يستخدم كإشارة تمكين (Enable) لمجموعة البوابات ثلاثية الحالات الخاصة بذلك المسجل."
    },
    {
        "question": "ما هو عدد البتات المستخدمة لتحديد عملية مصغرة معينة ضمن تعليمات الإدخال/الإخراج؟",
        "options": [
            "3 بت (opcode)",
            "12 بت (حقل العنوان)",
            "6 بت (من B6 إلى B11)",
            "1 بت (البت I)"
        ],
        "correctAnswerIndex": 2,
        "explanation": "في تعليمات الإدخال/الإخراج (opcode=111, I=1)، يتم استخدام البتات من 6 إلى 11 لتحديد العملية المحددة (مثل INP, OUT, SKI, SKO, ION, IOF). كل بت من هذه البتات الستة يقابل تعليمة مختلفة."
    },
    {
        "question": "أي من العمليات التالية لا يمكن تنفيذها في نبضة ساعة واحدة (single clock pulse)؟",
        "options": [
            "R1 ← R2",
            "R1 ← R1 + 1",
            "AC ← AC + M[AR]",
            "R1 ← 0"
        ],
        "correctAnswerIndex": 2,
        "explanation": "العملية `AC ← AC + M[AR]` تتطلب الوصول إلى الذاكرة. عادةً، يستغرق الوصول إلى الذاكرة وقتًا أطول من دورة ساعة واحدة للمعالج. لذا، يتم تقسيمها إلى عمليات مصغرة متعددة: `DR ← M[AR]` (في دورة)، ثم `AC ← AC + DR` (في دورة أخرى)."
    },
    {
        "question": "ما هو القاسم المشترك بين جميع تعليمات الإشارة إلى الذاكرة (Memory-Reference Instructions)؟",
        "options": [
            "أنها جميعًا تستخدم المراكم `AC`",
            "أنها جميعًا تتطلب 12 بتًا للعنوان",
            "أنها جميعًا تبدأ تنفيذها عند `T4`",
            "كل ما سبق"
        ],
        "correctAnswerIndex": 3,
        "explanation": "جميع هذه التعليمات تستخدم `AC` كمعامل أو وجهة، وتستخدم البتات 0-11 كعنوان للوصول إلى الذاكرة، وتبدأ مرحلة تنفيذها بعد اكتمال جلب العنوان الفعال، أي عند إشارة التوقيت `T4`."
    },
    {
        "question": "ما هو الاختصار `RTL`؟",
        "options": [
            "Real-Time Logic",
            "Register Transfer Language",
            "Random Timing Logic",
            "Register Timing Language"
        ],
        "correctAnswerIndex": 1,
        "explanation": "`RTL` هو اختصار لـ `Register Transfer Language`، وهي لغة رمزية تستخدم لوصف العمليات المصغرة التي تحدث داخل الحاسب، مثل نقل البيانات بين المسجلات."
    },
    {
        "question": "ما هو ناتج الإزاحة الحسابية لليمين `ashr` على القيمة `1010` (تمثل -6 في المتمم الثنائي)؟",
        "options": [
            "0101",
            "1101",
            "0010",
            "1001"
        ],
        "correctAnswerIndex": 1,
        "explanation": "الإزاحة الحسابية لليمين تقوم بإزاحة جميع البتات لليمين، ولكنها تكرر بت الإشارة (البت الأيسر) للحفاظ على الإشارة الصحيحة للرقم. لذا، `1010` تصبح `1101` (والتي تمثل -3)."
    },
    {
        "question": "ما هو دور `R` (Interrupt Flip-Flop) في مخطط الحاسب؟",
        "options": [
            "يخزن عنوان العودة",
            "يتم تعيينه إلى 1 عند وصول طلب مقاطعة، ويتم فحصه في كل دورة لتحديد ما إذا كان يجب بدء دورة مقاطعة",
            "يستخدم لإعادة ضبط الحاسب",
            "يستخدم لتمكين أو تعطيل المقاطعات"
        ],
        "correctAnswerIndex": 1,
        "explanation": "القلاب `R` هو قلاب طلب المقاطعة. عندما يصبح `IEN` و (`FGI` أو `FGO`) فعالين، يتم تعيين `R` إلى 1. تقوم وحدة التحكم بفحص `R` في نهاية كل دورة تعليمة. إذا كان `R=1`، تبدأ دورة المقاطعة بدلاً من دورة الجلب العادية."
    },
    {
        "question": "ما هي آخر عملية تحدث في دورة تعليمة `LDA`؟",
        "options": [
            "DR ← M[AR]",
            "AC ← DR, SC ← 0",
            "PC ← PC + 1",
            "IEN ← 0"
        ],
        "correctAnswerIndex": 1,
        "explanation": "آخر خطوة في تنفيذ `LDA` (عند `D2T5`) هي نقل البيانات من `DR` إلى `AC`، ومسح عداد التسلسل `SC` إلى `0` للإشارة إلى نهاية دورة التعليمة والاستعداد للدورة التالية."
    },
    {
        "question": "لماذا يتم استخدام `OUTR ← AC(0-7)` وليس `OUTR ← AC` في تعليمة `OUT`؟",
        "options": [
            "لأن `OUTR` أكبر من `AC`",
            "لأن `OUTR` حجمه 8 بت فقط (مخصص لحرف واحد)، بينما `AC` حجمه 16 بت",
            "لأن هذا أسرع",
            "لأسباب تتعلق بالأمان"
        ],
        "correctAnswerIndex": 1,
        "explanation": "تتطلب معظم أجهزة الإخراج الطرفية (مثل الطابعات التي تتعامل مع رموز ASCII) بيانات بحجم 8 بت. لذلك، يتم إرسال الجزء الأدنى فقط من المراكم (الـ 8 بتات الأقل أهمية) إلى مسجل الإخراج `OUTR`."
    },
    {
        "question": "ما هي الطريقة التي يتم بها اختيار المسجل الذي سيوضع محتواه على الناقل المشترك؟",
        "options": [
            "باستخدام عداد البرنامج PC",
            "بشكل عشوائي",
            "عن طريق إشارات التحكم S2, S1, S0 التي تحددها وحدة التحكم",
            "عن طريق مسجل التعليمات IR مباشرة"
        ],
        "correctAnswerIndex": 2,
        "explanation": "وحدة التحكم هي التي تقرر أي مسجل يجب أن يكون مصدر البيانات في كل عملية مصغرة. تقوم بتوليد الشيفرة الثنائية المناسبة على خطوط الاختيار S2, S1, S0 لتفعيل المسجل الصحيح."
    }
]
